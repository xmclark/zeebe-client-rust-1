// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TopologyRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TopologyRequest {
    pub fn new() -> TopologyRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TopologyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TopologyRequest {
        TopologyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TopologyRequest>(
                    "TopologyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TopologyRequest {
        static mut instance: ::protobuf::lazy::Lazy<TopologyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TopologyRequest,
        };
        unsafe {
            instance.get(TopologyRequest::new)
        }
    }
}

impl ::protobuf::Clear for TopologyRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TopologyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopologyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Partition {
    // message fields
    pub partitionId: i32,
    pub role: Partition_PartitionBrokerRole,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Partition {
    pub fn new() -> Partition {
        ::std::default::Default::default()
    }

    // int32 partitionId = 1;

    pub fn clear_partitionId(&mut self) {
        self.partitionId = 0;
    }

    // Param is passed by value, moved
    pub fn set_partitionId(&mut self, v: i32) {
        self.partitionId = v;
    }

    pub fn get_partitionId(&self) -> i32 {
        self.partitionId
    }

    // .gateway_protocol.Partition.PartitionBrokerRole role = 3;

    pub fn clear_role(&mut self) {
        self.role = Partition_PartitionBrokerRole::LEADER;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: Partition_PartitionBrokerRole) {
        self.role = v;
    }

    pub fn get_role(&self) -> Partition_PartitionBrokerRole {
        self.role
    }
}

impl ::protobuf::Message for Partition {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.partitionId = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.partitionId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.partitionId, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.role != Partition_PartitionBrokerRole::LEADER {
            my_size += ::protobuf::rt::enum_size(3, self.role);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.partitionId != 0 {
            os.write_int32(1, self.partitionId)?;
        }
        if self.role != Partition_PartitionBrokerRole::LEADER {
            os.write_enum(3, self.role.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Partition {
        Partition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "partitionId",
                    |m: &Partition| { &m.partitionId },
                    |m: &mut Partition| { &mut m.partitionId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Partition_PartitionBrokerRole>>(
                    "role",
                    |m: &Partition| { &m.role },
                    |m: &mut Partition| { &mut m.role },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Partition>(
                    "Partition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Partition {
        static mut instance: ::protobuf::lazy::Lazy<Partition> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Partition,
        };
        unsafe {
            instance.get(Partition::new)
        }
    }
}

impl ::protobuf::Clear for Partition {
    fn clear(&mut self) {
        self.clear_partitionId();
        self.clear_role();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Partition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Partition {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Partition_PartitionBrokerRole {
    LEADER = 0,
    FOLLOWER = 1,
}

impl ::protobuf::ProtobufEnum for Partition_PartitionBrokerRole {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Partition_PartitionBrokerRole> {
        match value {
            0 => ::std::option::Option::Some(Partition_PartitionBrokerRole::LEADER),
            1 => ::std::option::Option::Some(Partition_PartitionBrokerRole::FOLLOWER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Partition_PartitionBrokerRole] = &[
            Partition_PartitionBrokerRole::LEADER,
            Partition_PartitionBrokerRole::FOLLOWER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Partition_PartitionBrokerRole", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Partition_PartitionBrokerRole {
}

impl ::std::default::Default for Partition_PartitionBrokerRole {
    fn default() -> Self {
        Partition_PartitionBrokerRole::LEADER
    }
}

impl ::protobuf::reflect::ProtobufValue for Partition_PartitionBrokerRole {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BrokerInfo {
    // message fields
    pub nodeId: i32,
    pub host: ::std::string::String,
    pub port: i32,
    pub partitions: ::protobuf::RepeatedField<Partition>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl BrokerInfo {
    pub fn new() -> BrokerInfo {
        ::std::default::Default::default()
    }

    // int32 nodeId = 1;

    pub fn clear_nodeId(&mut self) {
        self.nodeId = 0;
    }

    // Param is passed by value, moved
    pub fn set_nodeId(&mut self, v: i32) {
        self.nodeId = v;
    }

    pub fn get_nodeId(&self) -> i32 {
        self.nodeId
    }

    // string host = 2;

    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    pub fn get_host(&self) -> &str {
        &self.host
    }

    // int32 port = 3;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }

    pub fn get_port(&self) -> i32 {
        self.port
    }

    // repeated .gateway_protocol.Partition partitions = 4;

    pub fn clear_partitions(&mut self) {
        self.partitions.clear();
    }

    // Param is passed by value, moved
    pub fn set_partitions(&mut self, v: ::protobuf::RepeatedField<Partition>) {
        self.partitions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partitions(&mut self) -> &mut ::protobuf::RepeatedField<Partition> {
        &mut self.partitions
    }

    // Take field
    pub fn take_partitions(&mut self) -> ::protobuf::RepeatedField<Partition> {
        ::std::mem::replace(&mut self.partitions, ::protobuf::RepeatedField::new())
    }

    pub fn get_partitions(&self) -> &[Partition] {
        &self.partitions
    }
}

impl ::protobuf::Message for BrokerInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.partitions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.nodeId = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.partitions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nodeId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nodeId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.host);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.partitions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nodeId != 0 {
            os.write_int32(1, self.nodeId)?;
        }
        if !self.host.is_empty() {
            os.write_string(2, &self.host)?;
        }
        if self.port != 0 {
            os.write_int32(3, self.port)?;
        }
        for v in &self.partitions {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BrokerInfo {
        BrokerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "nodeId",
                    |m: &BrokerInfo| { &m.nodeId },
                    |m: &mut BrokerInfo| { &mut m.nodeId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &BrokerInfo| { &m.host },
                    |m: &mut BrokerInfo| { &mut m.host },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "port",
                    |m: &BrokerInfo| { &m.port },
                    |m: &mut BrokerInfo| { &mut m.port },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Partition>>(
                    "partitions",
                    |m: &BrokerInfo| { &m.partitions },
                    |m: &mut BrokerInfo| { &mut m.partitions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BrokerInfo>(
                    "BrokerInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BrokerInfo {
        static mut instance: ::protobuf::lazy::Lazy<BrokerInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BrokerInfo,
        };
        unsafe {
            instance.get(BrokerInfo::new)
        }
    }
}

impl ::protobuf::Clear for BrokerInfo {
    fn clear(&mut self) {
        self.clear_nodeId();
        self.clear_host();
        self.clear_port();
        self.clear_partitions();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BrokerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BrokerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TopologyResponse {
    // message fields
    pub brokers: ::protobuf::RepeatedField<BrokerInfo>,
    pub clusterSize: i32,
    pub partitionsCount: i32,
    pub replicationFactor: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TopologyResponse {
    pub fn new() -> TopologyResponse {
        ::std::default::Default::default()
    }

    // repeated .gateway_protocol.BrokerInfo brokers = 1;

    pub fn clear_brokers(&mut self) {
        self.brokers.clear();
    }

    // Param is passed by value, moved
    pub fn set_brokers(&mut self, v: ::protobuf::RepeatedField<BrokerInfo>) {
        self.brokers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_brokers(&mut self) -> &mut ::protobuf::RepeatedField<BrokerInfo> {
        &mut self.brokers
    }

    // Take field
    pub fn take_brokers(&mut self) -> ::protobuf::RepeatedField<BrokerInfo> {
        ::std::mem::replace(&mut self.brokers, ::protobuf::RepeatedField::new())
    }

    pub fn get_brokers(&self) -> &[BrokerInfo] {
        &self.brokers
    }

    // int32 cluster_size = 2;

    pub fn clear_clusterSize(&mut self) {
        self.clusterSize = 0;
    }

    // Param is passed by value, moved
    pub fn set_clusterSize(&mut self, v: i32) {
        self.clusterSize = v;
    }

    pub fn get_clusterSize(&self) -> i32 {
        self.clusterSize
    }

    // int32 partitionsCount = 3;

    pub fn clear_partitionsCount(&mut self) {
        self.partitionsCount = 0;
    }

    // Param is passed by value, moved
    pub fn set_partitionsCount(&mut self, v: i32) {
        self.partitionsCount = v;
    }

    pub fn get_partitionsCount(&self) -> i32 {
        self.partitionsCount
    }

    // int32 replicationFactor = 4;

    pub fn clear_replicationFactor(&mut self) {
        self.replicationFactor = 0;
    }

    // Param is passed by value, moved
    pub fn set_replicationFactor(&mut self, v: i32) {
        self.replicationFactor = v;
    }

    pub fn get_replicationFactor(&self) -> i32 {
        self.replicationFactor
    }
}

impl ::protobuf::Message for TopologyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.brokers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.brokers)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.clusterSize = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.partitionsCount = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.replicationFactor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.brokers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.clusterSize != 0 {
            my_size += ::protobuf::rt::value_size(2, self.clusterSize, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.partitionsCount != 0 {
            my_size += ::protobuf::rt::value_size(3, self.partitionsCount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.replicationFactor != 0 {
            my_size += ::protobuf::rt::value_size(4, self.replicationFactor, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.brokers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.clusterSize != 0 {
            os.write_int32(2, self.clusterSize)?;
        }
        if self.partitionsCount != 0 {
            os.write_int32(3, self.partitionsCount)?;
        }
        if self.replicationFactor != 0 {
            os.write_int32(4, self.replicationFactor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TopologyResponse {
        TopologyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BrokerInfo>>(
                    "brokers",
                    |m: &TopologyResponse| { &m.brokers },
                    |m: &mut TopologyResponse| { &mut m.brokers },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "cluster_size",
                    |m: &TopologyResponse| { &m.clusterSize },
                    |m: &mut TopologyResponse| { &mut m.clusterSize },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "partitionsCount",
                    |m: &TopologyResponse| { &m.partitionsCount },
                    |m: &mut TopologyResponse| { &mut m.partitionsCount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "replicationFactor",
                    |m: &TopologyResponse| { &m.replicationFactor },
                    |m: &mut TopologyResponse| { &mut m.replicationFactor },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TopologyResponse>(
                    "TopologyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TopologyResponse {
        static mut instance: ::protobuf::lazy::Lazy<TopologyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TopologyResponse,
        };
        unsafe {
            instance.get(TopologyResponse::new)
        }
    }
}

impl ::protobuf::Clear for TopologyResponse {
    fn clear(&mut self) {
        self.clear_brokers();
        self.clear_clusterSize();
        self.clear_partitionsCount();
        self.clear_replicationFactor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TopologyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopologyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkflowRequestObject {
    // message fields
    pub name: ::std::string::String,
    pub field_type: WorkflowRequestObject_ResourceType,
    pub definition: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl WorkflowRequestObject {
    pub fn new() -> WorkflowRequestObject {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .gateway_protocol.WorkflowRequestObject.ResourceType type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type = WorkflowRequestObject_ResourceType::FILE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: WorkflowRequestObject_ResourceType) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> WorkflowRequestObject_ResourceType {
        self.field_type
    }

    // bytes definition = 3;

    pub fn clear_definition(&mut self) {
        self.definition.clear();
    }

    // Param is passed by value, moved
    pub fn set_definition(&mut self, v: ::std::vec::Vec<u8>) {
        self.definition = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_definition(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.definition
    }

    // Take field
    pub fn take_definition(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.definition, ::std::vec::Vec::new())
    }

    pub fn get_definition(&self) -> &[u8] {
        &self.definition
    }
}

impl ::protobuf::Message for WorkflowRequestObject {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.definition)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != WorkflowRequestObject_ResourceType::FILE {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if !self.definition.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.definition);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != WorkflowRequestObject_ResourceType::FILE {
            os.write_enum(2, self.field_type.value())?;
        }
        if !self.definition.is_empty() {
            os.write_bytes(3, &self.definition)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkflowRequestObject {
        WorkflowRequestObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &WorkflowRequestObject| { &m.name },
                    |m: &mut WorkflowRequestObject| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<WorkflowRequestObject_ResourceType>>(
                    "type",
                    |m: &WorkflowRequestObject| { &m.field_type },
                    |m: &mut WorkflowRequestObject| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "definition",
                    |m: &WorkflowRequestObject| { &m.definition },
                    |m: &mut WorkflowRequestObject| { &mut m.definition },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WorkflowRequestObject>(
                    "WorkflowRequestObject",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WorkflowRequestObject {
        static mut instance: ::protobuf::lazy::Lazy<WorkflowRequestObject> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WorkflowRequestObject,
        };
        unsafe {
            instance.get(WorkflowRequestObject::new)
        }
    }
}

impl ::protobuf::Clear for WorkflowRequestObject {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_field_type();
        self.clear_definition();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkflowRequestObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkflowRequestObject {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum WorkflowRequestObject_ResourceType {
    FILE = 0,
    BPMN = 1,
    YAML = 2,
}

impl ::protobuf::ProtobufEnum for WorkflowRequestObject_ResourceType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<WorkflowRequestObject_ResourceType> {
        match value {
            0 => ::std::option::Option::Some(WorkflowRequestObject_ResourceType::FILE),
            1 => ::std::option::Option::Some(WorkflowRequestObject_ResourceType::BPMN),
            2 => ::std::option::Option::Some(WorkflowRequestObject_ResourceType::YAML),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [WorkflowRequestObject_ResourceType] = &[
            WorkflowRequestObject_ResourceType::FILE,
            WorkflowRequestObject_ResourceType::BPMN,
            WorkflowRequestObject_ResourceType::YAML,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("WorkflowRequestObject_ResourceType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for WorkflowRequestObject_ResourceType {
}

impl ::std::default::Default for WorkflowRequestObject_ResourceType {
    fn default() -> Self {
        WorkflowRequestObject_ResourceType::FILE
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkflowRequestObject_ResourceType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeployWorkflowRequest {
    // message fields
    pub workflows: ::protobuf::RepeatedField<WorkflowRequestObject>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DeployWorkflowRequest {
    pub fn new() -> DeployWorkflowRequest {
        ::std::default::Default::default()
    }

    // repeated .gateway_protocol.WorkflowRequestObject workflows = 1;

    pub fn clear_workflows(&mut self) {
        self.workflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_workflows(&mut self, v: ::protobuf::RepeatedField<WorkflowRequestObject>) {
        self.workflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_workflows(&mut self) -> &mut ::protobuf::RepeatedField<WorkflowRequestObject> {
        &mut self.workflows
    }

    // Take field
    pub fn take_workflows(&mut self) -> ::protobuf::RepeatedField<WorkflowRequestObject> {
        ::std::mem::replace(&mut self.workflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_workflows(&self) -> &[WorkflowRequestObject] {
        &self.workflows
    }
}

impl ::protobuf::Message for DeployWorkflowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.workflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.workflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.workflows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.workflows {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeployWorkflowRequest {
        DeployWorkflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WorkflowRequestObject>>(
                    "workflows",
                    |m: &DeployWorkflowRequest| { &m.workflows },
                    |m: &mut DeployWorkflowRequest| { &mut m.workflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeployWorkflowRequest>(
                    "DeployWorkflowRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeployWorkflowRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeployWorkflowRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeployWorkflowRequest,
        };
        unsafe {
            instance.get(DeployWorkflowRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeployWorkflowRequest {
    fn clear(&mut self) {
        self.clear_workflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeployWorkflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeployWorkflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkflowMetadata {
    // message fields
    pub bpmnProcessId: ::std::string::String,
    pub version: i32,
    pub workflowKey: i64,
    pub resourceName: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl WorkflowMetadata {
    pub fn new() -> WorkflowMetadata {
        ::std::default::Default::default()
    }

    // string bpmnProcessId = 1;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }

    // int32 version = 2;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    pub fn get_version(&self) -> i32 {
        self.version
    }

    // int64 workflow_key = 3;

    pub fn clear_workflowKey(&mut self) {
        self.workflowKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowKey(&mut self, v: i64) {
        self.workflowKey = v;
    }

    pub fn get_workflowKey(&self) -> i64 {
        self.workflowKey
    }

    // string resourceName = 4;

    pub fn clear_resourceName(&mut self) {
        self.resourceName.clear();
    }

    // Param is passed by value, moved
    pub fn set_resourceName(&mut self, v: ::std::string::String) {
        self.resourceName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resourceName(&mut self) -> &mut ::std::string::String {
        &mut self.resourceName
    }

    // Take field
    pub fn take_resourceName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resourceName, ::std::string::String::new())
    }

    pub fn get_resourceName(&self) -> &str {
        &self.resourceName
    }
}

impl ::protobuf::Message for WorkflowMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowKey = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resourceName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bpmnProcessId);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.workflowKey != 0 {
            my_size += ::protobuf::rt::value_size(3, self.workflowKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.resourceName.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resourceName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.bpmnProcessId.is_empty() {
            os.write_string(1, &self.bpmnProcessId)?;
        }
        if self.version != 0 {
            os.write_int32(2, self.version)?;
        }
        if self.workflowKey != 0 {
            os.write_int64(3, self.workflowKey)?;
        }
        if !self.resourceName.is_empty() {
            os.write_string(4, &self.resourceName)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkflowMetadata {
        WorkflowMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &WorkflowMetadata| { &m.bpmnProcessId },
                    |m: &mut WorkflowMetadata| { &mut m.bpmnProcessId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &WorkflowMetadata| { &m.version },
                    |m: &mut WorkflowMetadata| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflow_key",
                    |m: &WorkflowMetadata| { &m.workflowKey },
                    |m: &mut WorkflowMetadata| { &mut m.workflowKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "resourceName",
                    |m: &WorkflowMetadata| { &m.resourceName },
                    |m: &mut WorkflowMetadata| { &mut m.resourceName },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WorkflowMetadata>(
                    "WorkflowMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WorkflowMetadata {
        static mut instance: ::protobuf::lazy::Lazy<WorkflowMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WorkflowMetadata,
        };
        unsafe {
            instance.get(WorkflowMetadata::new)
        }
    }
}

impl ::protobuf::Clear for WorkflowMetadata {
    fn clear(&mut self) {
        self.clear_bpmnProcessId();
        self.clear_version();
        self.clear_workflowKey();
        self.clear_resourceName();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkflowMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkflowMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeployWorkflowResponse {
    // message fields
    pub key: i64,
    pub workflows: ::protobuf::RepeatedField<WorkflowMetadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DeployWorkflowResponse {
    pub fn new() -> DeployWorkflowResponse {
        ::std::default::Default::default()
    }

    // int64 key = 1;

    pub fn clear_key(&mut self) {
        self.key = 0;
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: i64) {
        self.key = v;
    }

    pub fn get_key(&self) -> i64 {
        self.key
    }

    // repeated .gateway_protocol.WorkflowMetadata workflows = 2;

    pub fn clear_workflows(&mut self) {
        self.workflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_workflows(&mut self, v: ::protobuf::RepeatedField<WorkflowMetadata>) {
        self.workflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_workflows(&mut self) -> &mut ::protobuf::RepeatedField<WorkflowMetadata> {
        &mut self.workflows
    }

    // Take field
    pub fn take_workflows(&mut self) -> ::protobuf::RepeatedField<WorkflowMetadata> {
        ::std::mem::replace(&mut self.workflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_workflows(&self) -> &[WorkflowMetadata] {
        &self.workflows
    }
}

impl ::protobuf::Message for DeployWorkflowResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.workflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.key = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.workflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.workflows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.key != 0 {
            os.write_int64(1, self.key)?;
        }
        for v in &self.workflows {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeployWorkflowResponse {
        DeployWorkflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "key",
                    |m: &DeployWorkflowResponse| { &m.key },
                    |m: &mut DeployWorkflowResponse| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WorkflowMetadata>>(
                    "workflows",
                    |m: &DeployWorkflowResponse| { &m.workflows },
                    |m: &mut DeployWorkflowResponse| { &mut m.workflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeployWorkflowResponse>(
                    "DeployWorkflowResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeployWorkflowResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeployWorkflowResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeployWorkflowResponse,
        };
        unsafe {
            instance.get(DeployWorkflowResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeployWorkflowResponse {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_workflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeployWorkflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeployWorkflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublishMessageRequest {
    // message fields
    pub name: ::std::string::String,
    pub correlationKey: ::std::string::String,
    pub timeToLive: i64,
    pub messageId: ::std::string::String,
    pub payload: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PublishMessageRequest {
    pub fn new() -> PublishMessageRequest {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // string correlationKey = 2;

    pub fn clear_correlationKey(&mut self) {
        self.correlationKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_correlationKey(&mut self, v: ::std::string::String) {
        self.correlationKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_correlationKey(&mut self) -> &mut ::std::string::String {
        &mut self.correlationKey
    }

    // Take field
    pub fn take_correlationKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.correlationKey, ::std::string::String::new())
    }

    pub fn get_correlationKey(&self) -> &str {
        &self.correlationKey
    }

    // int64 timeToLive = 3;

    pub fn clear_timeToLive(&mut self) {
        self.timeToLive = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeToLive(&mut self, v: i64) {
        self.timeToLive = v;
    }

    pub fn get_timeToLive(&self) -> i64 {
        self.timeToLive
    }

    // string messageId = 4;

    pub fn clear_messageId(&mut self) {
        self.messageId.clear();
    }

    // Param is passed by value, moved
    pub fn set_messageId(&mut self, v: ::std::string::String) {
        self.messageId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_messageId(&mut self) -> &mut ::std::string::String {
        &mut self.messageId
    }

    // Take field
    pub fn take_messageId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.messageId, ::std::string::String::new())
    }

    pub fn get_messageId(&self) -> &str {
        &self.messageId
    }

    // string payload = 5;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload, ::std::string::String::new())
    }

    pub fn get_payload(&self) -> &str {
        &self.payload
    }
}

impl ::protobuf::Message for PublishMessageRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.correlationKey)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timeToLive = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.messageId)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.correlationKey.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.correlationKey);
        }
        if self.timeToLive != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeToLive, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.messageId.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.messageId);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.correlationKey.is_empty() {
            os.write_string(2, &self.correlationKey)?;
        }
        if self.timeToLive != 0 {
            os.write_int64(3, self.timeToLive)?;
        }
        if !self.messageId.is_empty() {
            os.write_string(4, &self.messageId)?;
        }
        if !self.payload.is_empty() {
            os.write_string(5, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublishMessageRequest {
        PublishMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &PublishMessageRequest| { &m.name },
                    |m: &mut PublishMessageRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "correlationKey",
                    |m: &PublishMessageRequest| { &m.correlationKey },
                    |m: &mut PublishMessageRequest| { &mut m.correlationKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timeToLive",
                    |m: &PublishMessageRequest| { &m.timeToLive },
                    |m: &mut PublishMessageRequest| { &mut m.timeToLive },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "messageId",
                    |m: &PublishMessageRequest| { &m.messageId },
                    |m: &mut PublishMessageRequest| { &mut m.messageId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payload",
                    |m: &PublishMessageRequest| { &m.payload },
                    |m: &mut PublishMessageRequest| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PublishMessageRequest>(
                    "PublishMessageRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PublishMessageRequest {
        static mut instance: ::protobuf::lazy::Lazy<PublishMessageRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PublishMessageRequest,
        };
        unsafe {
            instance.get(PublishMessageRequest::new)
        }
    }
}

impl ::protobuf::Clear for PublishMessageRequest {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_correlationKey();
        self.clear_timeToLive();
        self.clear_messageId();
        self.clear_payload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublishMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublishMessageResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PublishMessageResponse {
    pub fn new() -> PublishMessageResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PublishMessageResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublishMessageResponse {
        PublishMessageResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<PublishMessageResponse>(
                    "PublishMessageResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PublishMessageResponse {
        static mut instance: ::protobuf::lazy::Lazy<PublishMessageResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PublishMessageResponse,
        };
        unsafe {
            instance.get(PublishMessageResponse::new)
        }
    }
}

impl ::protobuf::Clear for PublishMessageResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublishMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishMessageResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateJobRetriesRequest {
    // message fields
    pub jobKey: i64,
    pub retries: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl UpdateJobRetriesRequest {
    pub fn new() -> UpdateJobRetriesRequest {
        ::std::default::Default::default()
    }

    // int64 jobKey = 1;

    pub fn clear_jobKey(&mut self) {
        self.jobKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_jobKey(&mut self, v: i64) {
        self.jobKey = v;
    }

    pub fn get_jobKey(&self) -> i64 {
        self.jobKey
    }

    // int32 retries = 2;

    pub fn clear_retries(&mut self) {
        self.retries = 0;
    }

    // Param is passed by value, moved
    pub fn set_retries(&mut self, v: i32) {
        self.retries = v;
    }

    pub fn get_retries(&self) -> i32 {
        self.retries
    }
}

impl ::protobuf::Message for UpdateJobRetriesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.jobKey = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.retries = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.jobKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.jobKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.retries != 0 {
            my_size += ::protobuf::rt::value_size(2, self.retries, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.jobKey != 0 {
            os.write_int64(1, self.jobKey)?;
        }
        if self.retries != 0 {
            os.write_int32(2, self.retries)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateJobRetriesRequest {
        UpdateJobRetriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "jobKey",
                    |m: &UpdateJobRetriesRequest| { &m.jobKey },
                    |m: &mut UpdateJobRetriesRequest| { &mut m.jobKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "retries",
                    |m: &UpdateJobRetriesRequest| { &m.retries },
                    |m: &mut UpdateJobRetriesRequest| { &mut m.retries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateJobRetriesRequest>(
                    "UpdateJobRetriesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateJobRetriesRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateJobRetriesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateJobRetriesRequest,
        };
        unsafe {
            instance.get(UpdateJobRetriesRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateJobRetriesRequest {
    fn clear(&mut self) {
        self.clear_jobKey();
        self.clear_retries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateJobRetriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateJobRetriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateJobRetriesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl UpdateJobRetriesResponse {
    pub fn new() -> UpdateJobRetriesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateJobRetriesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateJobRetriesResponse {
        UpdateJobRetriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<UpdateJobRetriesResponse>(
                    "UpdateJobRetriesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateJobRetriesResponse {
        static mut instance: ::protobuf::lazy::Lazy<UpdateJobRetriesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateJobRetriesResponse,
        };
        unsafe {
            instance.get(UpdateJobRetriesResponse::new)
        }
    }
}

impl ::protobuf::Clear for UpdateJobRetriesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateJobRetriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateJobRetriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FailJobRequest {
    // message fields
    pub jobKey: i64,
    pub retries: i32,
    pub errorMessage: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FailJobRequest {
    pub fn new() -> FailJobRequest {
        ::std::default::Default::default()
    }

    // int64 jobKey = 1;

    pub fn clear_jobKey(&mut self) {
        self.jobKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_jobKey(&mut self, v: i64) {
        self.jobKey = v;
    }

    pub fn get_jobKey(&self) -> i64 {
        self.jobKey
    }

    // int32 retries = 2;

    pub fn clear_retries(&mut self) {
        self.retries = 0;
    }

    // Param is passed by value, moved
    pub fn set_retries(&mut self, v: i32) {
        self.retries = v;
    }

    pub fn get_retries(&self) -> i32 {
        self.retries
    }

    // string errorMessage = 3;

    pub fn clear_errorMessage(&mut self) {
        self.errorMessage.clear();
    }

    // Param is passed by value, moved
    pub fn set_errorMessage(&mut self, v: ::std::string::String) {
        self.errorMessage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errorMessage(&mut self) -> &mut ::std::string::String {
        &mut self.errorMessage
    }

    // Take field
    pub fn take_errorMessage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errorMessage, ::std::string::String::new())
    }

    pub fn get_errorMessage(&self) -> &str {
        &self.errorMessage
    }
}

impl ::protobuf::Message for FailJobRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.jobKey = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.retries = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errorMessage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.jobKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.jobKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.retries != 0 {
            my_size += ::protobuf::rt::value_size(2, self.retries, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.errorMessage.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.errorMessage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.jobKey != 0 {
            os.write_int64(1, self.jobKey)?;
        }
        if self.retries != 0 {
            os.write_int32(2, self.retries)?;
        }
        if !self.errorMessage.is_empty() {
            os.write_string(3, &self.errorMessage)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FailJobRequest {
        FailJobRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "jobKey",
                    |m: &FailJobRequest| { &m.jobKey },
                    |m: &mut FailJobRequest| { &mut m.jobKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "retries",
                    |m: &FailJobRequest| { &m.retries },
                    |m: &mut FailJobRequest| { &mut m.retries },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errorMessage",
                    |m: &FailJobRequest| { &m.errorMessage },
                    |m: &mut FailJobRequest| { &mut m.errorMessage },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FailJobRequest>(
                    "FailJobRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FailJobRequest {
        static mut instance: ::protobuf::lazy::Lazy<FailJobRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FailJobRequest,
        };
        unsafe {
            instance.get(FailJobRequest::new)
        }
    }
}

impl ::protobuf::Clear for FailJobRequest {
    fn clear(&mut self) {
        self.clear_jobKey();
        self.clear_retries();
        self.clear_errorMessage();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FailJobRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FailJobRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FailJobResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FailJobResponse {
    pub fn new() -> FailJobResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FailJobResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FailJobResponse {
        FailJobResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<FailJobResponse>(
                    "FailJobResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FailJobResponse {
        static mut instance: ::protobuf::lazy::Lazy<FailJobResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FailJobResponse,
        };
        unsafe {
            instance.get(FailJobResponse::new)
        }
    }
}

impl ::protobuf::Clear for FailJobResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FailJobResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FailJobResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompleteJobRequest {
    // message fields
    pub jobKey: i64,
    pub payload: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CompleteJobRequest {
    pub fn new() -> CompleteJobRequest {
        ::std::default::Default::default()
    }

    // int64 jobKey = 1;

    pub fn clear_jobKey(&mut self) {
        self.jobKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_jobKey(&mut self, v: i64) {
        self.jobKey = v;
    }

    pub fn get_jobKey(&self) -> i64 {
        self.jobKey
    }

    // string payload = 2;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload, ::std::string::String::new())
    }

    pub fn get_payload(&self) -> &str {
        &self.payload
    }
}

impl ::protobuf::Message for CompleteJobRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.jobKey = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.jobKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.jobKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.jobKey != 0 {
            os.write_int64(1, self.jobKey)?;
        }
        if !self.payload.is_empty() {
            os.write_string(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompleteJobRequest {
        CompleteJobRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "jobKey",
                    |m: &CompleteJobRequest| { &m.jobKey },
                    |m: &mut CompleteJobRequest| { &mut m.jobKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payload",
                    |m: &CompleteJobRequest| { &m.payload },
                    |m: &mut CompleteJobRequest| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompleteJobRequest>(
                    "CompleteJobRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompleteJobRequest {
        static mut instance: ::protobuf::lazy::Lazy<CompleteJobRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompleteJobRequest,
        };
        unsafe {
            instance.get(CompleteJobRequest::new)
        }
    }
}

impl ::protobuf::Clear for CompleteJobRequest {
    fn clear(&mut self) {
        self.clear_jobKey();
        self.clear_payload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompleteJobRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompleteJobRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompleteJobResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CompleteJobResponse {
    pub fn new() -> CompleteJobResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CompleteJobResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompleteJobResponse {
        CompleteJobResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CompleteJobResponse>(
                    "CompleteJobResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompleteJobResponse {
        static mut instance: ::protobuf::lazy::Lazy<CompleteJobResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompleteJobResponse,
        };
        unsafe {
            instance.get(CompleteJobResponse::new)
        }
    }
}

impl ::protobuf::Clear for CompleteJobResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompleteJobResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompleteJobResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateWorkflowInstanceRequest {
    // message fields
    pub workflowKey: i64,
    pub bpmnProcessId: ::std::string::String,
    pub version: i32,
    pub payload: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateWorkflowInstanceRequest {
    pub fn new() -> CreateWorkflowInstanceRequest {
        ::std::default::Default::default()
    }

    // int64 workflow_key = 1;

    pub fn clear_workflowKey(&mut self) {
        self.workflowKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowKey(&mut self, v: i64) {
        self.workflowKey = v;
    }

    pub fn get_workflowKey(&self) -> i64 {
        self.workflowKey
    }

    // string bpmnProcessId = 2;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }

    // int32 version = 3;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    pub fn get_version(&self) -> i32 {
        self.version
    }

    // string payload = 4;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload, ::std::string::String::new())
    }

    pub fn get_payload(&self) -> &str {
        &self.payload
    }
}

impl ::protobuf::Message for CreateWorkflowInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowKey = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.workflowKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.workflowKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bpmnProcessId);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.workflowKey != 0 {
            os.write_int64(1, self.workflowKey)?;
        }
        if !self.bpmnProcessId.is_empty() {
            os.write_string(2, &self.bpmnProcessId)?;
        }
        if self.version != 0 {
            os.write_int32(3, self.version)?;
        }
        if !self.payload.is_empty() {
            os.write_string(4, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateWorkflowInstanceRequest {
        CreateWorkflowInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflow_key",
                    |m: &CreateWorkflowInstanceRequest| { &m.workflowKey },
                    |m: &mut CreateWorkflowInstanceRequest| { &mut m.workflowKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &CreateWorkflowInstanceRequest| { &m.bpmnProcessId },
                    |m: &mut CreateWorkflowInstanceRequest| { &mut m.bpmnProcessId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &CreateWorkflowInstanceRequest| { &m.version },
                    |m: &mut CreateWorkflowInstanceRequest| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payload",
                    |m: &CreateWorkflowInstanceRequest| { &m.payload },
                    |m: &mut CreateWorkflowInstanceRequest| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateWorkflowInstanceRequest>(
                    "CreateWorkflowInstanceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateWorkflowInstanceRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateWorkflowInstanceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateWorkflowInstanceRequest,
        };
        unsafe {
            instance.get(CreateWorkflowInstanceRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateWorkflowInstanceRequest {
    fn clear(&mut self) {
        self.clear_workflowKey();
        self.clear_bpmnProcessId();
        self.clear_version();
        self.clear_payload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateWorkflowInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateWorkflowInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateWorkflowInstanceResponse {
    // message fields
    pub workflowKey: i64,
    pub bpmnProcessId: ::std::string::String,
    pub version: i32,
    pub workflowInstanceKey: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateWorkflowInstanceResponse {
    pub fn new() -> CreateWorkflowInstanceResponse {
        ::std::default::Default::default()
    }

    // int64 workflow_key = 1;

    pub fn clear_workflowKey(&mut self) {
        self.workflowKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowKey(&mut self, v: i64) {
        self.workflowKey = v;
    }

    pub fn get_workflowKey(&self) -> i64 {
        self.workflowKey
    }

    // string bpmnProcessId = 2;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }

    // int32 version = 3;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    pub fn get_version(&self) -> i32 {
        self.version
    }

    // int64 workflowInstanceKey = 5;

    pub fn clear_workflowInstanceKey(&mut self) {
        self.workflowInstanceKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowInstanceKey(&mut self, v: i64) {
        self.workflowInstanceKey = v;
    }

    pub fn get_workflowInstanceKey(&self) -> i64 {
        self.workflowInstanceKey
    }
}

impl ::protobuf::Message for CreateWorkflowInstanceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowKey = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowInstanceKey = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.workflowKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.workflowKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bpmnProcessId);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.workflowInstanceKey != 0 {
            my_size += ::protobuf::rt::value_size(5, self.workflowInstanceKey, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.workflowKey != 0 {
            os.write_int64(1, self.workflowKey)?;
        }
        if !self.bpmnProcessId.is_empty() {
            os.write_string(2, &self.bpmnProcessId)?;
        }
        if self.version != 0 {
            os.write_int32(3, self.version)?;
        }
        if self.workflowInstanceKey != 0 {
            os.write_int64(5, self.workflowInstanceKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateWorkflowInstanceResponse {
        CreateWorkflowInstanceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflow_key",
                    |m: &CreateWorkflowInstanceResponse| { &m.workflowKey },
                    |m: &mut CreateWorkflowInstanceResponse| { &mut m.workflowKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &CreateWorkflowInstanceResponse| { &m.bpmnProcessId },
                    |m: &mut CreateWorkflowInstanceResponse| { &mut m.bpmnProcessId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &CreateWorkflowInstanceResponse| { &m.version },
                    |m: &mut CreateWorkflowInstanceResponse| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflowInstanceKey",
                    |m: &CreateWorkflowInstanceResponse| { &m.workflowInstanceKey },
                    |m: &mut CreateWorkflowInstanceResponse| { &mut m.workflowInstanceKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateWorkflowInstanceResponse>(
                    "CreateWorkflowInstanceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateWorkflowInstanceResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateWorkflowInstanceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateWorkflowInstanceResponse,
        };
        unsafe {
            instance.get(CreateWorkflowInstanceResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateWorkflowInstanceResponse {
    fn clear(&mut self) {
        self.clear_workflowKey();
        self.clear_bpmnProcessId();
        self.clear_version();
        self.clear_workflowInstanceKey();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateWorkflowInstanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateWorkflowInstanceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelWorkflowInstanceRequest {
    // message fields
    pub workflowInstanceKey: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CancelWorkflowInstanceRequest {
    pub fn new() -> CancelWorkflowInstanceRequest {
        ::std::default::Default::default()
    }

    // int64 workflowInstanceKey = 1;

    pub fn clear_workflowInstanceKey(&mut self) {
        self.workflowInstanceKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowInstanceKey(&mut self, v: i64) {
        self.workflowInstanceKey = v;
    }

    pub fn get_workflowInstanceKey(&self) -> i64 {
        self.workflowInstanceKey
    }
}

impl ::protobuf::Message for CancelWorkflowInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowInstanceKey = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.workflowInstanceKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.workflowInstanceKey, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.workflowInstanceKey != 0 {
            os.write_int64(1, self.workflowInstanceKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelWorkflowInstanceRequest {
        CancelWorkflowInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflowInstanceKey",
                    |m: &CancelWorkflowInstanceRequest| { &m.workflowInstanceKey },
                    |m: &mut CancelWorkflowInstanceRequest| { &mut m.workflowInstanceKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CancelWorkflowInstanceRequest>(
                    "CancelWorkflowInstanceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelWorkflowInstanceRequest {
        static mut instance: ::protobuf::lazy::Lazy<CancelWorkflowInstanceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelWorkflowInstanceRequest,
        };
        unsafe {
            instance.get(CancelWorkflowInstanceRequest::new)
        }
    }
}

impl ::protobuf::Clear for CancelWorkflowInstanceRequest {
    fn clear(&mut self) {
        self.clear_workflowInstanceKey();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelWorkflowInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelWorkflowInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelWorkflowInstanceResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CancelWorkflowInstanceResponse {
    pub fn new() -> CancelWorkflowInstanceResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CancelWorkflowInstanceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelWorkflowInstanceResponse {
        CancelWorkflowInstanceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CancelWorkflowInstanceResponse>(
                    "CancelWorkflowInstanceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelWorkflowInstanceResponse {
        static mut instance: ::protobuf::lazy::Lazy<CancelWorkflowInstanceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelWorkflowInstanceResponse,
        };
        unsafe {
            instance.get(CancelWorkflowInstanceResponse::new)
        }
    }
}

impl ::protobuf::Clear for CancelWorkflowInstanceResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelWorkflowInstanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelWorkflowInstanceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateWorkflowInstancePayloadRequest {
    // message fields
    pub elementInstanceKey: i64,
    pub payload: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl UpdateWorkflowInstancePayloadRequest {
    pub fn new() -> UpdateWorkflowInstancePayloadRequest {
        ::std::default::Default::default()
    }

    // int64 elementInstanceKey = 1;

    pub fn clear_elementInstanceKey(&mut self) {
        self.elementInstanceKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_elementInstanceKey(&mut self, v: i64) {
        self.elementInstanceKey = v;
    }

    pub fn get_elementInstanceKey(&self) -> i64 {
        self.elementInstanceKey
    }

    // string payload = 2;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload, ::std::string::String::new())
    }

    pub fn get_payload(&self) -> &str {
        &self.payload
    }
}

impl ::protobuf::Message for UpdateWorkflowInstancePayloadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.elementInstanceKey = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.elementInstanceKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.elementInstanceKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.elementInstanceKey != 0 {
            os.write_int64(1, self.elementInstanceKey)?;
        }
        if !self.payload.is_empty() {
            os.write_string(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateWorkflowInstancePayloadRequest {
        UpdateWorkflowInstancePayloadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "elementInstanceKey",
                    |m: &UpdateWorkflowInstancePayloadRequest| { &m.elementInstanceKey },
                    |m: &mut UpdateWorkflowInstancePayloadRequest| { &mut m.elementInstanceKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payload",
                    |m: &UpdateWorkflowInstancePayloadRequest| { &m.payload },
                    |m: &mut UpdateWorkflowInstancePayloadRequest| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateWorkflowInstancePayloadRequest>(
                    "UpdateWorkflowInstancePayloadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateWorkflowInstancePayloadRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateWorkflowInstancePayloadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateWorkflowInstancePayloadRequest,
        };
        unsafe {
            instance.get(UpdateWorkflowInstancePayloadRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateWorkflowInstancePayloadRequest {
    fn clear(&mut self) {
        self.clear_elementInstanceKey();
        self.clear_payload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateWorkflowInstancePayloadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateWorkflowInstancePayloadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateWorkflowInstancePayloadResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl UpdateWorkflowInstancePayloadResponse {
    pub fn new() -> UpdateWorkflowInstancePayloadResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateWorkflowInstancePayloadResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateWorkflowInstancePayloadResponse {
        UpdateWorkflowInstancePayloadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<UpdateWorkflowInstancePayloadResponse>(
                    "UpdateWorkflowInstancePayloadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateWorkflowInstancePayloadResponse {
        static mut instance: ::protobuf::lazy::Lazy<UpdateWorkflowInstancePayloadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateWorkflowInstancePayloadResponse,
        };
        unsafe {
            instance.get(UpdateWorkflowInstancePayloadResponse::new)
        }
    }
}

impl ::protobuf::Clear for UpdateWorkflowInstancePayloadResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateWorkflowInstancePayloadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateWorkflowInstancePayloadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListWorkflowsRequest {
    // message fields
    pub bpmnProcessId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ListWorkflowsRequest {
    pub fn new() -> ListWorkflowsRequest {
        ::std::default::Default::default()
    }

    // string bpmnProcessId = 1;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }
}

impl ::protobuf::Message for ListWorkflowsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bpmnProcessId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.bpmnProcessId.is_empty() {
            os.write_string(1, &self.bpmnProcessId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListWorkflowsRequest {
        ListWorkflowsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &ListWorkflowsRequest| { &m.bpmnProcessId },
                    |m: &mut ListWorkflowsRequest| { &mut m.bpmnProcessId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListWorkflowsRequest>(
                    "ListWorkflowsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListWorkflowsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListWorkflowsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListWorkflowsRequest,
        };
        unsafe {
            instance.get(ListWorkflowsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListWorkflowsRequest {
    fn clear(&mut self) {
        self.clear_bpmnProcessId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListWorkflowsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListWorkflowsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListWorkflowsResponse {
    // message fields
    pub workflows: ::protobuf::RepeatedField<WorkflowMetadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ListWorkflowsResponse {
    pub fn new() -> ListWorkflowsResponse {
        ::std::default::Default::default()
    }

    // repeated .gateway_protocol.WorkflowMetadata workflows = 1;

    pub fn clear_workflows(&mut self) {
        self.workflows.clear();
    }

    // Param is passed by value, moved
    pub fn set_workflows(&mut self, v: ::protobuf::RepeatedField<WorkflowMetadata>) {
        self.workflows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_workflows(&mut self) -> &mut ::protobuf::RepeatedField<WorkflowMetadata> {
        &mut self.workflows
    }

    // Take field
    pub fn take_workflows(&mut self) -> ::protobuf::RepeatedField<WorkflowMetadata> {
        ::std::mem::replace(&mut self.workflows, ::protobuf::RepeatedField::new())
    }

    pub fn get_workflows(&self) -> &[WorkflowMetadata] {
        &self.workflows
    }
}

impl ::protobuf::Message for ListWorkflowsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.workflows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.workflows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.workflows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.workflows {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListWorkflowsResponse {
        ListWorkflowsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WorkflowMetadata>>(
                    "workflows",
                    |m: &ListWorkflowsResponse| { &m.workflows },
                    |m: &mut ListWorkflowsResponse| { &mut m.workflows },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListWorkflowsResponse>(
                    "ListWorkflowsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListWorkflowsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListWorkflowsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListWorkflowsResponse,
        };
        unsafe {
            instance.get(ListWorkflowsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListWorkflowsResponse {
    fn clear(&mut self) {
        self.clear_workflows();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListWorkflowsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListWorkflowsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetWorkflowRequest {
    // message fields
    pub workflowKey: i64,
    pub version: i32,
    pub bpmnProcessId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl GetWorkflowRequest {
    pub fn new() -> GetWorkflowRequest {
        ::std::default::Default::default()
    }

    // int64 workflow_key = 1;

    pub fn clear_workflowKey(&mut self) {
        self.workflowKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowKey(&mut self, v: i64) {
        self.workflowKey = v;
    }

    pub fn get_workflowKey(&self) -> i64 {
        self.workflowKey
    }

    // int32 version = 2;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    pub fn get_version(&self) -> i32 {
        self.version
    }

    // string bpmnProcessId = 3;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }
}

impl ::protobuf::Message for GetWorkflowRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowKey = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.workflowKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.workflowKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bpmnProcessId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.workflowKey != 0 {
            os.write_int64(1, self.workflowKey)?;
        }
        if self.version != 0 {
            os.write_int32(2, self.version)?;
        }
        if !self.bpmnProcessId.is_empty() {
            os.write_string(3, &self.bpmnProcessId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetWorkflowRequest {
        GetWorkflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflow_key",
                    |m: &GetWorkflowRequest| { &m.workflowKey },
                    |m: &mut GetWorkflowRequest| { &mut m.workflowKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &GetWorkflowRequest| { &m.version },
                    |m: &mut GetWorkflowRequest| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &GetWorkflowRequest| { &m.bpmnProcessId },
                    |m: &mut GetWorkflowRequest| { &mut m.bpmnProcessId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetWorkflowRequest>(
                    "GetWorkflowRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetWorkflowRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetWorkflowRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetWorkflowRequest,
        };
        unsafe {
            instance.get(GetWorkflowRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetWorkflowRequest {
    fn clear(&mut self) {
        self.clear_workflowKey();
        self.clear_version();
        self.clear_bpmnProcessId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetWorkflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetWorkflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetWorkflowResponse {
    // message fields
    pub workflowKey: i64,
    pub version: i32,
    pub bpmnProcessId: ::std::string::String,
    pub resourceName: ::std::string::String,
    pub bpmnXml: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl GetWorkflowResponse {
    pub fn new() -> GetWorkflowResponse {
        ::std::default::Default::default()
    }

    // int64 workflow_key = 1;

    pub fn clear_workflowKey(&mut self) {
        self.workflowKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowKey(&mut self, v: i64) {
        self.workflowKey = v;
    }

    pub fn get_workflowKey(&self) -> i64 {
        self.workflowKey
    }

    // int32 version = 2;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    pub fn get_version(&self) -> i32 {
        self.version
    }

    // string bpmnProcessId = 3;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }

    // string resourceName = 4;

    pub fn clear_resourceName(&mut self) {
        self.resourceName.clear();
    }

    // Param is passed by value, moved
    pub fn set_resourceName(&mut self, v: ::std::string::String) {
        self.resourceName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resourceName(&mut self) -> &mut ::std::string::String {
        &mut self.resourceName
    }

    // Take field
    pub fn take_resourceName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resourceName, ::std::string::String::new())
    }

    pub fn get_resourceName(&self) -> &str {
        &self.resourceName
    }

    // string bpmnXml = 5;

    pub fn clear_bpmnXml(&mut self) {
        self.bpmnXml.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnXml(&mut self, v: ::std::string::String) {
        self.bpmnXml = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnXml(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnXml
    }

    // Take field
    pub fn take_bpmnXml(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnXml, ::std::string::String::new())
    }

    pub fn get_bpmnXml(&self) -> &str {
        &self.bpmnXml
    }
}

impl ::protobuf::Message for GetWorkflowResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowKey = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resourceName)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnXml)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.workflowKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.workflowKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bpmnProcessId);
        }
        if !self.resourceName.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resourceName);
        }
        if !self.bpmnXml.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.bpmnXml);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.workflowKey != 0 {
            os.write_int64(1, self.workflowKey)?;
        }
        if self.version != 0 {
            os.write_int32(2, self.version)?;
        }
        if !self.bpmnProcessId.is_empty() {
            os.write_string(3, &self.bpmnProcessId)?;
        }
        if !self.resourceName.is_empty() {
            os.write_string(4, &self.resourceName)?;
        }
        if !self.bpmnXml.is_empty() {
            os.write_string(5, &self.bpmnXml)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetWorkflowResponse {
        GetWorkflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflow_key",
                    |m: &GetWorkflowResponse| { &m.workflowKey },
                    |m: &mut GetWorkflowResponse| { &mut m.workflowKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &GetWorkflowResponse| { &m.version },
                    |m: &mut GetWorkflowResponse| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &GetWorkflowResponse| { &m.bpmnProcessId },
                    |m: &mut GetWorkflowResponse| { &mut m.bpmnProcessId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "resourceName",
                    |m: &GetWorkflowResponse| { &m.resourceName },
                    |m: &mut GetWorkflowResponse| { &mut m.resourceName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnXml",
                    |m: &GetWorkflowResponse| { &m.bpmnXml },
                    |m: &mut GetWorkflowResponse| { &mut m.bpmnXml },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetWorkflowResponse>(
                    "GetWorkflowResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetWorkflowResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetWorkflowResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetWorkflowResponse,
        };
        unsafe {
            instance.get(GetWorkflowResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetWorkflowResponse {
    fn clear(&mut self) {
        self.clear_workflowKey();
        self.clear_version();
        self.clear_bpmnProcessId();
        self.clear_resourceName();
        self.clear_bpmnXml();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetWorkflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetWorkflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActivateJobsRequest {
    // message fields
    pub field_type: ::std::string::String,
    pub worker: ::std::string::String,
    pub timeout: i64,
    pub amount: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ActivateJobsRequest {
    pub fn new() -> ActivateJobsRequest {
        ::std::default::Default::default()
    }

    // string type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // string worker = 2;

    pub fn clear_worker(&mut self) {
        self.worker.clear();
    }

    // Param is passed by value, moved
    pub fn set_worker(&mut self, v: ::std::string::String) {
        self.worker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_worker(&mut self) -> &mut ::std::string::String {
        &mut self.worker
    }

    // Take field
    pub fn take_worker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.worker, ::std::string::String::new())
    }

    pub fn get_worker(&self) -> &str {
        &self.worker
    }

    // int64 timeout = 3;

    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: i64) {
        self.timeout = v;
    }

    pub fn get_timeout(&self) -> i64 {
        self.timeout
    }

    // int32 amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> i32 {
        self.amount
    }
}

impl ::protobuf::Message for ActivateJobsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.worker)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timeout = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.worker.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.worker);
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.worker.is_empty() {
            os.write_string(2, &self.worker)?;
        }
        if self.timeout != 0 {
            os.write_int64(3, self.timeout)?;
        }
        if self.amount != 0 {
            os.write_int32(4, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActivateJobsRequest {
        ActivateJobsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &ActivateJobsRequest| { &m.field_type },
                    |m: &mut ActivateJobsRequest| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "worker",
                    |m: &ActivateJobsRequest| { &m.worker },
                    |m: &mut ActivateJobsRequest| { &mut m.worker },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timeout",
                    |m: &ActivateJobsRequest| { &m.timeout },
                    |m: &mut ActivateJobsRequest| { &mut m.timeout },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "amount",
                    |m: &ActivateJobsRequest| { &m.amount },
                    |m: &mut ActivateJobsRequest| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActivateJobsRequest>(
                    "ActivateJobsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActivateJobsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ActivateJobsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActivateJobsRequest,
        };
        unsafe {
            instance.get(ActivateJobsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ActivateJobsRequest {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_worker();
        self.clear_timeout();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActivateJobsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivateJobsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobHeaders {
    // message fields
    pub workflowInstanceKey: i64,
    pub bpmnProcessId: ::std::string::String,
    pub workflowDefinitionVersion: i32,
    pub workflowKey: i64,
    pub elementId: ::std::string::String,
    pub elementInstanceKey: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl JobHeaders {
    pub fn new() -> JobHeaders {
        ::std::default::Default::default()
    }

    // int64 workflowInstanceKey = 1;

    pub fn clear_workflowInstanceKey(&mut self) {
        self.workflowInstanceKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowInstanceKey(&mut self, v: i64) {
        self.workflowInstanceKey = v;
    }

    pub fn get_workflowInstanceKey(&self) -> i64 {
        self.workflowInstanceKey
    }

    // string bpmnProcessId = 2;

    pub fn clear_bpmnProcessId(&mut self) {
        self.bpmnProcessId.clear();
    }

    // Param is passed by value, moved
    pub fn set_bpmnProcessId(&mut self, v: ::std::string::String) {
        self.bpmnProcessId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bpmnProcessId(&mut self) -> &mut ::std::string::String {
        &mut self.bpmnProcessId
    }

    // Take field
    pub fn take_bpmnProcessId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bpmnProcessId, ::std::string::String::new())
    }

    pub fn get_bpmnProcessId(&self) -> &str {
        &self.bpmnProcessId
    }

    // int32 workflowDefinitionVersion = 3;

    pub fn clear_workflowDefinitionVersion(&mut self) {
        self.workflowDefinitionVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowDefinitionVersion(&mut self, v: i32) {
        self.workflowDefinitionVersion = v;
    }

    pub fn get_workflowDefinitionVersion(&self) -> i32 {
        self.workflowDefinitionVersion
    }

    // int64 workflow_key = 4;

    pub fn clear_workflowKey(&mut self) {
        self.workflowKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_workflowKey(&mut self, v: i64) {
        self.workflowKey = v;
    }

    pub fn get_workflowKey(&self) -> i64 {
        self.workflowKey
    }

    // string elementId = 5;

    pub fn clear_elementId(&mut self) {
        self.elementId.clear();
    }

    // Param is passed by value, moved
    pub fn set_elementId(&mut self, v: ::std::string::String) {
        self.elementId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_elementId(&mut self) -> &mut ::std::string::String {
        &mut self.elementId
    }

    // Take field
    pub fn take_elementId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.elementId, ::std::string::String::new())
    }

    pub fn get_elementId(&self) -> &str {
        &self.elementId
    }

    // int64 elementInstanceKey = 6;

    pub fn clear_elementInstanceKey(&mut self) {
        self.elementInstanceKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_elementInstanceKey(&mut self, v: i64) {
        self.elementInstanceKey = v;
    }

    pub fn get_elementInstanceKey(&self) -> i64 {
        self.elementInstanceKey
    }
}

impl ::protobuf::Message for JobHeaders {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowInstanceKey = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bpmnProcessId)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.workflowDefinitionVersion = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.workflowKey = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.elementId)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.elementInstanceKey = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.workflowInstanceKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.workflowInstanceKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bpmnProcessId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bpmnProcessId);
        }
        if self.workflowDefinitionVersion != 0 {
            my_size += ::protobuf::rt::value_size(3, self.workflowDefinitionVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.workflowKey != 0 {
            my_size += ::protobuf::rt::value_size(4, self.workflowKey, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.elementId.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.elementId);
        }
        if self.elementInstanceKey != 0 {
            my_size += ::protobuf::rt::value_size(6, self.elementInstanceKey, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.workflowInstanceKey != 0 {
            os.write_int64(1, self.workflowInstanceKey)?;
        }
        if !self.bpmnProcessId.is_empty() {
            os.write_string(2, &self.bpmnProcessId)?;
        }
        if self.workflowDefinitionVersion != 0 {
            os.write_int32(3, self.workflowDefinitionVersion)?;
        }
        if self.workflowKey != 0 {
            os.write_int64(4, self.workflowKey)?;
        }
        if !self.elementId.is_empty() {
            os.write_string(5, &self.elementId)?;
        }
        if self.elementInstanceKey != 0 {
            os.write_int64(6, self.elementInstanceKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobHeaders {
        JobHeaders::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflowInstanceKey",
                    |m: &JobHeaders| { &m.workflowInstanceKey },
                    |m: &mut JobHeaders| { &mut m.workflowInstanceKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bpmnProcessId",
                    |m: &JobHeaders| { &m.bpmnProcessId },
                    |m: &mut JobHeaders| { &mut m.bpmnProcessId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "workflowDefinitionVersion",
                    |m: &JobHeaders| { &m.workflowDefinitionVersion },
                    |m: &mut JobHeaders| { &mut m.workflowDefinitionVersion },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "workflow_key",
                    |m: &JobHeaders| { &m.workflowKey },
                    |m: &mut JobHeaders| { &mut m.workflowKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "elementId",
                    |m: &JobHeaders| { &m.elementId },
                    |m: &mut JobHeaders| { &mut m.elementId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "elementInstanceKey",
                    |m: &JobHeaders| { &m.elementInstanceKey },
                    |m: &mut JobHeaders| { &mut m.elementInstanceKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JobHeaders>(
                    "JobHeaders",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JobHeaders {
        static mut instance: ::protobuf::lazy::Lazy<JobHeaders> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JobHeaders,
        };
        unsafe {
            instance.get(JobHeaders::new)
        }
    }
}

impl ::protobuf::Clear for JobHeaders {
    fn clear(&mut self) {
        self.clear_workflowInstanceKey();
        self.clear_bpmnProcessId();
        self.clear_workflowDefinitionVersion();
        self.clear_workflowKey();
        self.clear_elementId();
        self.clear_elementInstanceKey();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobHeaders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobHeaders {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActivatedJob {
    // message fields
    pub key: i64,
    pub field_type: ::std::string::String,
    pub jobHeaders: ::protobuf::SingularPtrField<JobHeaders>,
    pub customHeaders: ::std::string::String,
    pub worker: ::std::string::String,
    pub retries: i32,
    pub deadline: i64,
    pub payload: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ActivatedJob {
    pub fn new() -> ActivatedJob {
        ::std::default::Default::default()
    }

    // int64 key = 1;

    pub fn clear_key(&mut self) {
        self.key = 0;
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: i64) {
        self.key = v;
    }

    pub fn get_key(&self) -> i64 {
        self.key
    }

    // string type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // .gateway_protocol.JobHeaders jobHeaders = 3;

    pub fn clear_jobHeaders(&mut self) {
        self.jobHeaders.clear();
    }

    pub fn has_jobHeaders(&self) -> bool {
        self.jobHeaders.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jobHeaders(&mut self, v: JobHeaders) {
        self.jobHeaders = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_jobHeaders(&mut self) -> &mut JobHeaders {
        if self.jobHeaders.is_none() {
            self.jobHeaders.set_default();
        }
        self.jobHeaders.as_mut().unwrap()
    }

    // Take field
    pub fn take_jobHeaders(&mut self) -> JobHeaders {
        self.jobHeaders.take().unwrap_or_else(|| JobHeaders::new())
    }

    pub fn get_jobHeaders(&self) -> &JobHeaders {
        self.jobHeaders.as_ref().unwrap_or_else(|| JobHeaders::default_instance())
    }

    // string customHeaders = 4;

    pub fn clear_customHeaders(&mut self) {
        self.customHeaders.clear();
    }

    // Param is passed by value, moved
    pub fn set_customHeaders(&mut self, v: ::std::string::String) {
        self.customHeaders = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customHeaders(&mut self) -> &mut ::std::string::String {
        &mut self.customHeaders
    }

    // Take field
    pub fn take_customHeaders(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customHeaders, ::std::string::String::new())
    }

    pub fn get_customHeaders(&self) -> &str {
        &self.customHeaders
    }

    // string worker = 5;

    pub fn clear_worker(&mut self) {
        self.worker.clear();
    }

    // Param is passed by value, moved
    pub fn set_worker(&mut self, v: ::std::string::String) {
        self.worker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_worker(&mut self) -> &mut ::std::string::String {
        &mut self.worker
    }

    // Take field
    pub fn take_worker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.worker, ::std::string::String::new())
    }

    pub fn get_worker(&self) -> &str {
        &self.worker
    }

    // int32 retries = 6;

    pub fn clear_retries(&mut self) {
        self.retries = 0;
    }

    // Param is passed by value, moved
    pub fn set_retries(&mut self, v: i32) {
        self.retries = v;
    }

    pub fn get_retries(&self) -> i32 {
        self.retries
    }

    // int64 deadline = 7;

    pub fn clear_deadline(&mut self) {
        self.deadline = 0;
    }

    // Param is passed by value, moved
    pub fn set_deadline(&mut self, v: i64) {
        self.deadline = v;
    }

    pub fn get_deadline(&self) -> i64 {
        self.deadline
    }

    // string payload = 8;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload, ::std::string::String::new())
    }

    pub fn get_payload(&self) -> &str {
        &self.payload
    }
}

impl ::protobuf::Message for ActivatedJob {
    fn is_initialized(&self) -> bool {
        for v in &self.jobHeaders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.key = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.jobHeaders)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customHeaders)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.worker)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.retries = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deadline = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if let Some(ref v) = self.jobHeaders.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.customHeaders.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.customHeaders);
        }
        if !self.worker.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.worker);
        }
        if self.retries != 0 {
            my_size += ::protobuf::rt::value_size(6, self.retries, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deadline != 0 {
            my_size += ::protobuf::rt::value_size(7, self.deadline, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.key != 0 {
            os.write_int64(1, self.key)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if let Some(ref v) = self.jobHeaders.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.customHeaders.is_empty() {
            os.write_string(4, &self.customHeaders)?;
        }
        if !self.worker.is_empty() {
            os.write_string(5, &self.worker)?;
        }
        if self.retries != 0 {
            os.write_int32(6, self.retries)?;
        }
        if self.deadline != 0 {
            os.write_int64(7, self.deadline)?;
        }
        if !self.payload.is_empty() {
            os.write_string(8, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActivatedJob {
        ActivatedJob::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "key",
                    |m: &ActivatedJob| { &m.key },
                    |m: &mut ActivatedJob| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &ActivatedJob| { &m.field_type },
                    |m: &mut ActivatedJob| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<JobHeaders>>(
                    "jobHeaders",
                    |m: &ActivatedJob| { &m.jobHeaders },
                    |m: &mut ActivatedJob| { &mut m.jobHeaders },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "customHeaders",
                    |m: &ActivatedJob| { &m.customHeaders },
                    |m: &mut ActivatedJob| { &mut m.customHeaders },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "worker",
                    |m: &ActivatedJob| { &m.worker },
                    |m: &mut ActivatedJob| { &mut m.worker },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "retries",
                    |m: &ActivatedJob| { &m.retries },
                    |m: &mut ActivatedJob| { &mut m.retries },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deadline",
                    |m: &ActivatedJob| { &m.deadline },
                    |m: &mut ActivatedJob| { &mut m.deadline },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payload",
                    |m: &ActivatedJob| { &m.payload },
                    |m: &mut ActivatedJob| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActivatedJob>(
                    "ActivatedJob",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActivatedJob {
        static mut instance: ::protobuf::lazy::Lazy<ActivatedJob> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActivatedJob,
        };
        unsafe {
            instance.get(ActivatedJob::new)
        }
    }
}

impl ::protobuf::Clear for ActivatedJob {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_field_type();
        self.clear_jobHeaders();
        self.clear_customHeaders();
        self.clear_worker();
        self.clear_retries();
        self.clear_deadline();
        self.clear_payload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActivatedJob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivatedJob {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActivateJobsResponse {
    // message fields
    pub jobs: ::protobuf::RepeatedField<ActivatedJob>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ActivateJobsResponse {
    pub fn new() -> ActivateJobsResponse {
        ::std::default::Default::default()
    }

    // repeated .gateway_protocol.ActivatedJob jobs = 1;

    pub fn clear_jobs(&mut self) {
        self.jobs.clear();
    }

    // Param is passed by value, moved
    pub fn set_jobs(&mut self, v: ::protobuf::RepeatedField<ActivatedJob>) {
        self.jobs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_jobs(&mut self) -> &mut ::protobuf::RepeatedField<ActivatedJob> {
        &mut self.jobs
    }

    // Take field
    pub fn take_jobs(&mut self) -> ::protobuf::RepeatedField<ActivatedJob> {
        ::std::mem::replace(&mut self.jobs, ::protobuf::RepeatedField::new())
    }

    pub fn get_jobs(&self) -> &[ActivatedJob] {
        &self.jobs
    }
}

impl ::protobuf::Message for ActivateJobsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.jobs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.jobs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.jobs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.jobs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActivateJobsResponse {
        ActivateJobsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActivatedJob>>(
                    "jobs",
                    |m: &ActivateJobsResponse| { &m.jobs },
                    |m: &mut ActivateJobsResponse| { &mut m.jobs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActivateJobsResponse>(
                    "ActivateJobsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActivateJobsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ActivateJobsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActivateJobsResponse,
        };
        unsafe {
            instance.get(ActivateJobsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ActivateJobsResponse {
    fn clear(&mut self) {
        self.clear_jobs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActivateJobsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivateJobsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolveIncidentRequest {
    // message fields
    pub incidentKey: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ResolveIncidentRequest {
    pub fn new() -> ResolveIncidentRequest {
        ::std::default::Default::default()
    }

    // int64 incidentKey = 1;

    pub fn clear_incidentKey(&mut self) {
        self.incidentKey = 0;
    }

    // Param is passed by value, moved
    pub fn set_incidentKey(&mut self, v: i64) {
        self.incidentKey = v;
    }

    pub fn get_incidentKey(&self) -> i64 {
        self.incidentKey
    }
}

impl ::protobuf::Message for ResolveIncidentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.incidentKey = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.incidentKey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.incidentKey, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.incidentKey != 0 {
            os.write_int64(1, self.incidentKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveIncidentRequest {
        ResolveIncidentRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "incidentKey",
                    |m: &ResolveIncidentRequest| { &m.incidentKey },
                    |m: &mut ResolveIncidentRequest| { &mut m.incidentKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResolveIncidentRequest>(
                    "ResolveIncidentRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveIncidentRequest {
        static mut instance: ::protobuf::lazy::Lazy<ResolveIncidentRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveIncidentRequest,
        };
        unsafe {
            instance.get(ResolveIncidentRequest::new)
        }
    }
}

impl ::protobuf::Clear for ResolveIncidentRequest {
    fn clear(&mut self) {
        self.clear_incidentKey();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveIncidentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveIncidentRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolveIncidentResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ResolveIncidentResponse {
    pub fn new() -> ResolveIncidentResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ResolveIncidentResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveIncidentResponse {
        ResolveIncidentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ResolveIncidentResponse>(
                    "ResolveIncidentResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveIncidentResponse {
        static mut instance: ::protobuf::lazy::Lazy<ResolveIncidentResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveIncidentResponse,
        };
        unsafe {
            instance.get(ResolveIncidentResponse::new)
        }
    }
}

impl ::protobuf::Clear for ResolveIncidentResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveIncidentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveIncidentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rgateway.proto\x12\x10gateway_protocol\"\x11\n\x0fTopologyRequest\"\
    \xa3\x01\n\tPartition\x12\x20\n\x0bpartitionId\x18\x01\x20\x01(\x05R\x0b\
    partitionId\x12C\n\x04role\x18\x03\x20\x01(\x0e2/.gateway_protocol.Parti\
    tion.PartitionBrokerRoleR\x04role\"/\n\x13PartitionBrokerRole\x12\n\n\
    \x06LEADER\x10\0\x12\x0c\n\x08FOLLOWER\x10\x01\"\x89\x01\n\nBrokerInfo\
    \x12\x16\n\x06nodeId\x18\x01\x20\x01(\x05R\x06nodeId\x12\x12\n\x04host\
    \x18\x02\x20\x01(\tR\x04host\x12\x12\n\x04port\x18\x03\x20\x01(\x05R\x04\
    port\x12;\n\npartitions\x18\x04\x20\x03(\x0b2\x1b.gateway_protocol.Parti\
    tionR\npartitions\"\xc4\x01\n\x10TopologyResponse\x126\n\x07brokers\x18\
    \x01\x20\x03(\x0b2\x1c.gateway_protocol.BrokerInfoR\x07brokers\x12\x20\n\
    \x0bclusterSize\x18\x02\x20\x01(\x05R\x0bclusterSize\x12(\n\x0fpartition\
    sCount\x18\x03\x20\x01(\x05R\x0fpartitionsCount\x12,\n\x11replicationFac\
    tor\x18\x04\x20\x01(\x05R\x11replicationFactor\"\xc3\x01\n\x15WorkflowRe\
    questObject\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12H\n\x04type\
    \x18\x02\x20\x01(\x0e24.gateway_protocol.WorkflowRequestObject.ResourceT\
    ypeR\x04type\x12\x1e\n\ndefinition\x18\x03\x20\x01(\x0cR\ndefinition\",\
    \n\x0cResourceType\x12\x08\n\x04FILE\x10\0\x12\x08\n\x04BPMN\x10\x01\x12\
    \x08\n\x04YAML\x10\x02\"^\n\x15DeployWorkflowRequest\x12E\n\tworkflows\
    \x18\x01\x20\x03(\x0b2'.gateway_protocol.WorkflowRequestObjectR\tworkflo\
    ws\"\x98\x01\n\x10WorkflowMetadata\x12$\n\rbpmnProcessId\x18\x01\x20\x01\
    (\tR\rbpmnProcessId\x12\x18\n\x07version\x18\x02\x20\x01(\x05R\x07versio\
    n\x12\x20\n\x0bworkflowKey\x18\x03\x20\x01(\x03R\x0bworkflowKey\x12\"\n\
    \x0cresourceName\x18\x04\x20\x01(\tR\x0cresourceName\"l\n\x16DeployWorkf\
    lowResponse\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03key\x12@\n\tworkfl\
    ows\x18\x02\x20\x03(\x0b2\".gateway_protocol.WorkflowMetadataR\tworkflow\
    s\"\xab\x01\n\x15PublishMessageRequest\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12&\n\x0ecorrelationKey\x18\x02\x20\x01(\tR\x0ecorrelation\
    Key\x12\x1e\n\ntimeToLive\x18\x03\x20\x01(\x03R\ntimeToLive\x12\x1c\n\tm\
    essageId\x18\x04\x20\x01(\tR\tmessageId\x12\x18\n\x07payload\x18\x05\x20\
    \x01(\tR\x07payload\"\x18\n\x16PublishMessageResponse\"K\n\x17UpdateJobR\
    etriesRequest\x12\x16\n\x06jobKey\x18\x01\x20\x01(\x03R\x06jobKey\x12\
    \x18\n\x07retries\x18\x02\x20\x01(\x05R\x07retries\"\x1a\n\x18UpdateJobR\
    etriesResponse\"f\n\x0eFailJobRequest\x12\x16\n\x06jobKey\x18\x01\x20\
    \x01(\x03R\x06jobKey\x12\x18\n\x07retries\x18\x02\x20\x01(\x05R\x07retri\
    es\x12\"\n\x0cerrorMessage\x18\x03\x20\x01(\tR\x0cerrorMessage\"\x11\n\
    \x0fFailJobResponse\"F\n\x12CompleteJobRequest\x12\x16\n\x06jobKey\x18\
    \x01\x20\x01(\x03R\x06jobKey\x12\x18\n\x07payload\x18\x02\x20\x01(\tR\
    \x07payload\"\x15\n\x13CompleteJobResponse\"\x9b\x01\n\x1dCreateWorkflow\
    InstanceRequest\x12\x20\n\x0bworkflowKey\x18\x01\x20\x01(\x03R\x0bworkfl\
    owKey\x12$\n\rbpmnProcessId\x18\x02\x20\x01(\tR\rbpmnProcessId\x12\x18\n\
    \x07version\x18\x03\x20\x01(\x05R\x07version\x12\x18\n\x07payload\x18\
    \x04\x20\x01(\tR\x07payload\"\xb4\x01\n\x1eCreateWorkflowInstanceRespons\
    e\x12\x20\n\x0bworkflowKey\x18\x01\x20\x01(\x03R\x0bworkflowKey\x12$\n\r\
    bpmnProcessId\x18\x02\x20\x01(\tR\rbpmnProcessId\x12\x18\n\x07version\
    \x18\x03\x20\x01(\x05R\x07version\x120\n\x13workflowInstanceKey\x18\x05\
    \x20\x01(\x03R\x13workflowInstanceKey\"Q\n\x1dCancelWorkflowInstanceRequ\
    est\x120\n\x13workflowInstanceKey\x18\x01\x20\x01(\x03R\x13workflowInsta\
    nceKey\"\x20\n\x1eCancelWorkflowInstanceResponse\"p\n$UpdateWorkflowInst\
    ancePayloadRequest\x12.\n\x12elementInstanceKey\x18\x01\x20\x01(\x03R\
    \x12elementInstanceKey\x12\x18\n\x07payload\x18\x02\x20\x01(\tR\x07paylo\
    ad\"'\n%UpdateWorkflowInstancePayloadResponse\"<\n\x14ListWorkflowsReque\
    st\x12$\n\rbpmnProcessId\x18\x01\x20\x01(\tR\rbpmnProcessId\"Y\n\x15List\
    WorkflowsResponse\x12@\n\tworkflows\x18\x01\x20\x03(\x0b2\".gateway_prot\
    ocol.WorkflowMetadataR\tworkflows\"v\n\x12GetWorkflowRequest\x12\x20\n\
    \x0bworkflowKey\x18\x01\x20\x01(\x03R\x0bworkflowKey\x12\x18\n\x07versio\
    n\x18\x02\x20\x01(\x05R\x07version\x12$\n\rbpmnProcessId\x18\x03\x20\x01\
    (\tR\rbpmnProcessId\"\xb5\x01\n\x13GetWorkflowResponse\x12\x20\n\x0bwork\
    flowKey\x18\x01\x20\x01(\x03R\x0bworkflowKey\x12\x18\n\x07version\x18\
    \x02\x20\x01(\x05R\x07version\x12$\n\rbpmnProcessId\x18\x03\x20\x01(\tR\
    \rbpmnProcessId\x12\"\n\x0cresourceName\x18\x04\x20\x01(\tR\x0cresourceN\
    ame\x12\x18\n\x07bpmnXml\x18\x05\x20\x01(\tR\x07bpmnXml\"s\n\x13Activate\
    JobsRequest\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x16\n\x06w\
    orker\x18\x02\x20\x01(\tR\x06worker\x12\x18\n\x07timeout\x18\x03\x20\x01\
    (\x03R\x07timeout\x12\x16\n\x06amount\x18\x04\x20\x01(\x05R\x06amount\"\
    \x92\x02\n\nJobHeaders\x120\n\x13workflowInstanceKey\x18\x01\x20\x01(\
    \x03R\x13workflowInstanceKey\x12$\n\rbpmnProcessId\x18\x02\x20\x01(\tR\r\
    bpmnProcessId\x12<\n\x19workflowDefinitionVersion\x18\x03\x20\x01(\x05R\
    \x19workflowDefinitionVersion\x12\x20\n\x0bworkflowKey\x18\x04\x20\x01(\
    \x03R\x0bworkflowKey\x12\x1c\n\telementId\x18\x05\x20\x01(\tR\telementId\
    \x12.\n\x12elementInstanceKey\x18\x06\x20\x01(\x03R\x12elementInstanceKe\
    y\"\x80\x02\n\x0cActivatedJob\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03\
    key\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12<\n\njobHeaders\x18\
    \x03\x20\x01(\x0b2\x1c.gateway_protocol.JobHeadersR\njobHeaders\x12$\n\r\
    customHeaders\x18\x04\x20\x01(\tR\rcustomHeaders\x12\x16\n\x06worker\x18\
    \x05\x20\x01(\tR\x06worker\x12\x18\n\x07retries\x18\x06\x20\x01(\x05R\
    \x07retries\x12\x1a\n\x08deadline\x18\x07\x20\x01(\x03R\x08deadline\x12\
    \x18\n\x07payload\x18\x08\x20\x01(\tR\x07payload\"J\n\x14ActivateJobsRes\
    ponse\x122\n\x04jobs\x18\x01\x20\x03(\x0b2\x1e.gateway_protocol.Activate\
    dJobR\x04jobs\":\n\x16ResolveIncidentRequest\x12\x20\n\x0bincidentKey\
    \x18\x01\x20\x01(\x03R\x0bincidentKey\"\x19\n\x17ResolveIncidentResponse\
    2\xeb\n\n\x07Gateway\x12S\n\x08Topology\x12!.gateway_protocol.TopologyRe\
    quest\x1a\".gateway_protocol.TopologyResponse\"\0\x12e\n\x0eDeployWorkfl\
    ow\x12'.gateway_protocol.DeployWorkflowRequest\x1a(.gateway_protocol.Dep\
    loyWorkflowResponse\"\0\x12e\n\x0ePublishMessage\x12'.gateway_protocol.P\
    ublishMessageRequest\x1a(.gateway_protocol.PublishMessageResponse\"\0\
    \x12k\n\x10UpdateJobRetries\x12).gateway_protocol.UpdateJobRetriesReques\
    t\x1a*.gateway_protocol.UpdateJobRetriesResponse\"\0\x12P\n\x07FailJob\
    \x12\x20.gateway_protocol.FailJobRequest\x1a!.gateway_protocol.FailJobRe\
    sponse\"\0\x12\\\n\x0bCompleteJob\x12$.gateway_protocol.CompleteJobReque\
    st\x1a%.gateway_protocol.CompleteJobResponse\"\0\x12}\n\x16CreateWorkflo\
    wInstance\x12/.gateway_protocol.CreateWorkflowInstanceRequest\x1a0.gatew\
    ay_protocol.CreateWorkflowInstanceResponse\"\0\x12}\n\x16CancelWorkflowI\
    nstance\x12/.gateway_protocol.CancelWorkflowInstanceRequest\x1a0.gateway\
    _protocol.CancelWorkflowInstanceResponse\"\0\x12\x92\x01\n\x1dUpdateWork\
    flowInstancePayload\x126.gateway_protocol.UpdateWorkflowInstancePayloadR\
    equest\x1a7.gateway_protocol.UpdateWorkflowInstancePayloadResponse\"\0\
    \x12a\n\x0cActivateJobs\x12%.gateway_protocol.ActivateJobsRequest\x1a&.g\
    ateway_protocol.ActivateJobsResponse\"\00\x01\x12b\n\rListWorkflows\x12&\
    .gateway_protocol.ListWorkflowsRequest\x1a'.gateway_protocol.ListWorkflo\
    wsResponse\"\0\x12\\\n\x0bGetWorkflow\x12$.gateway_protocol.GetWorkflowR\
    equest\x1a%.gateway_protocol.GetWorkflowResponse\"\0\x12h\n\x0fResolveIn\
    cident\x12(.gateway_protocol.ResolveIncidentRequest\x1a).gateway_protoco\
    l.ResolveIncidentResponse\"\0B!\n\x19io.zeebe.gateway.protocolP\0Z\x02pb\
    J\xae>\n\x07\x12\x05\0\0\xe0\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\x08\x18\n\x08\n\x01\x08\x12\x03\x03\0#\n\t\n\
    \x02\x08\n\x12\x03\x03\0#\n\x08\n\x01\x08\x12\x03\x04\02\n\t\n\x02\x08\
    \x01\x12\x03\x04\02\n\x08\n\x01\x08\x12\x03\x05\0\x19\n\t\n\x02\x08\x0b\
    \x12\x03\x05\0\x19\n\n\n\x02\x04\0\x12\x04\x07\0\x08\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x07\x08\x17\n\n\n\x02\x04\x01\x12\x04\n\0\x11\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\n\x08\x11\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x02\
    \x18\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0b\x02\n\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x0b\x08\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\x16\x17\n\x0c\n\
    \x04\x04\x01\x04\0\x12\x04\x0c\x02\x0f\x03\n\x0c\n\x05\x04\x01\x04\0\x01\
    \x12\x03\x0c\x07\x1a\n\r\n\x06\x04\x01\x04\0\x02\0\x12\x03\r\x04\x0f\n\
    \x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03\r\x04\n\n\x0e\n\x07\x04\x01\
    \x04\0\x02\0\x02\x12\x03\r\r\x0e\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03\
    \x0e\x04\x11\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03\x0e\x04\x0c\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x03\x0e\x0f\x10\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x10\x02\x1f\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\
    \x10\x02\x0f\x03\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x10\x02\x15\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x16\x1a\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x10\x1d\x1e\n\n\n\x02\x04\x02\x12\x04\x13\0\x18\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x12\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x14\x02\x13\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x14\x02\x13\x14\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x14\x02\x07\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x14\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14\x11\
    \x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x15\x02\x12\n\r\n\x05\x04\x02\
    \x02\x01\x04\x12\x04\x15\x02\x14\x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x15\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\t\r\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x15\x10\x11\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x16\x02\x11\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x16\x02\x15\
    \x12\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03\x16\x08\x0c\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03\x16\x0f\x10\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x17\x02$\n\x0c\n\
    \x05\x04\x02\x02\x03\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\x02\x02\x03\
    \x06\x12\x03\x17\x0b\x14\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x17\x15\
    \x1f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x17\"#\n\n\n\x02\x04\x03\
    \x12\x04\x1a\0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1a\x08\x18\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03\x1b\x02\"\n\x0c\n\x05\x04\x03\x02\0\x04\x12\
    \x03\x1b\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1b\x0b\x15\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03\x1b\x16\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03\x1b\x20!\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1c\x02\x18\n\r\n\
    \x05\x04\x03\x02\x01\x04\x12\x04\x1c\x02\x1b\"\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x1c\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1c\
    \x08\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1c\x16\x17\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03\x1d\x02\x1c\n\r\n\x05\x04\x03\x02\x02\x04\x12\
    \x04\x1d\x02\x1c\x18\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1d\x02\x07\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1d\x08\x17\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03\x1d\x1a\x1b\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x1e\
    \x02\x1e\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x1e\x02\x1d\x1c\n\x0c\n\
    \x05\x04\x03\x02\x03\x05\x12\x03\x1e\x02\x07\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03\x1e\x08\x19\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1e\x1c\
    \x1d\n\n\n\x02\x04\x04\x12\x04!\0+\x01\n\n\n\x03\x04\x04\x01\x12\x03!\
    \x08\x1d\n\x0b\n\x04\x04\x04\x02\0\x12\x03\"\x02\x12\n\r\n\x05\x04\x04\
    \x02\0\x04\x12\x04\"\x02!\x1f\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\"\
    \x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\"\t\r\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03\"\x10\x11\n\x0c\n\x04\x04\x04\x04\0\x12\x04#\x02(\x03\
    \n\x0c\n\x05\x04\x04\x04\0\x01\x12\x03#\x07\x13\nv\n\x06\x04\x04\x04\0\
    \x02\0\x12\x03%\x04\r\x1ag\x20FILE\x20type\x20means\x20the\x20gateway\
    \x20will\x20try\x20to\x20detect\x20the\x20resource\x20type\x20using\x20t\
    he\x20file\x20extension\x20of\x20the\x20name\n\n\x0e\n\x07\x04\x04\x04\0\
    \x02\0\x01\x12\x03%\x04\x08\n\x0e\n\x07\x04\x04\x04\0\x02\0\x02\x12\x03%\
    \x0b\x0c\n\r\n\x06\x04\x04\x04\0\x02\x01\x12\x03&\x04\r\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x01\x01\x12\x03&\x04\x08\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x01\x02\x12\x03&\x0b\x0c\n\r\n\x06\x04\x04\x04\0\x02\x02\x12\x03'\x04\r\
    \n\x0e\n\x07\x04\x04\x04\0\x02\x02\x01\x12\x03'\x04\x08\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x02\x02\x12\x03'\x0b\x0c\n\x0b\n\x04\x04\x04\x02\x01\x12\
    \x03)\x02\x18\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04)\x02(\x03\n\x0c\n\
    \x05\x04\x04\x02\x01\x06\x12\x03)\x02\x0e\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03)\x0f\x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03)\x16\x17\n\
    \x0b\n\x04\x04\x04\x02\x02\x12\x03*\x02\x17\n\r\n\x05\x04\x04\x02\x02\
    \x04\x12\x04*\x02)\x18\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03*\x02\x07\
    \n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03*\x08\x12\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03*\x15\x16\n\n\n\x02\x04\x05\x12\x04-\0/\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03-\x08\x1d\n\x0b\n\x04\x04\x05\x02\0\x12\x03.\x02\
    /\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x05\x02\0\
    \x06\x12\x03.\x0b\x20\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03.!*\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03.-.\n\n\n\x02\x04\x06\x12\x041\06\x01\n\n\
    \n\x03\x04\x06\x01\x12\x031\x08\x18\n\x0b\n\x04\x04\x06\x02\0\x12\x032\
    \x02\x1b\n\r\n\x05\x04\x06\x02\0\x04\x12\x042\x021\x1a\n\x0c\n\x05\x04\
    \x06\x02\0\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x032\t\
    \x16\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x032\x19\x1a\n\x0b\n\x04\x04\x06\
    \x02\x01\x12\x033\x02\x14\n\r\n\x05\x04\x06\x02\x01\x04\x12\x043\x022\
    \x1b\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x033\x02\x07\n\x0c\n\x05\x04\
    \x06\x02\x01\x01\x12\x033\x08\x0f\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\
    \x033\x12\x13\n\x0b\n\x04\x04\x06\x02\x02\x12\x034\x02\x18\n\r\n\x05\x04\
    \x06\x02\x02\x04\x12\x044\x023\x14\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\
    \x034\x02\x07\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x034\x08\x13\n\x0c\n\
    \x05\x04\x06\x02\x02\x03\x12\x034\x16\x17\n\x0b\n\x04\x04\x06\x02\x03\
    \x12\x035\x02\x1a\n\r\n\x05\x04\x06\x02\x03\x04\x12\x045\x024\x18\n\x0c\
    \n\x05\x04\x06\x02\x03\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\
    \x01\x12\x035\t\x15\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x035\x18\x19\n\n\
    \n\x02\x04\x07\x12\x048\0;\x01\n\n\n\x03\x04\x07\x01\x12\x038\x08\x1e\n\
    \x0b\n\x04\x04\x07\x02\0\x12\x039\x02\x10\n\r\n\x05\x04\x07\x02\0\x04\
    \x12\x049\x028\x20\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x039\x02\x07\n\x0c\
    \n\x05\x04\x07\x02\0\x01\x12\x039\x08\x0b\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x039\x0e\x0f\n\x0b\n\x04\x04\x07\x02\x01\x12\x03:\x02*\n\x0c\n\x05\
    \x04\x07\x02\x01\x04\x12\x03:\x02\n\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\
    \x03:\x0b\x1b\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03:\x1c%\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x03:()\n\n\n\x02\x04\x08\x12\x04=\0D\x01\n\n\n\
    \x03\x04\x08\x01\x12\x03=\x08\x1d\n\x0b\n\x04\x04\x08\x02\0\x12\x03>\x02\
    \x12\n\r\n\x05\x04\x08\x02\0\x04\x12\x04>\x02=\x1f\n\x0c\n\x05\x04\x08\
    \x02\0\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03>\t\r\n\
    \x0c\n\x05\x04\x08\x02\0\x03\x12\x03>\x10\x11\n\x0b\n\x04\x04\x08\x02\
    \x01\x12\x03?\x02\x1c\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04?\x02>\x12\n\
    \x0c\n\x05\x04\x08\x02\x01\x05\x12\x03?\x02\x08\n\x0c\n\x05\x04\x08\x02\
    \x01\x01\x12\x03?\t\x17\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03?\x1a\x1b\
    \n\x0b\n\x04\x04\x08\x02\x02\x12\x03@\x02\x17\n\r\n\x05\x04\x08\x02\x02\
    \x04\x12\x04@\x02?\x1c\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03@\x02\x07\
    \n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03@\x08\x12\n\x0c\n\x05\x04\x08\
    \x02\x02\x03\x12\x03@\x15\x16\n\x0b\n\x04\x04\x08\x02\x03\x12\x03A\x02\
    \x17\n\r\n\x05\x04\x08\x02\x03\x04\x12\x04A\x02@\x17\n\x0c\n\x05\x04\x08\
    \x02\x03\x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03A\t\
    \x12\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03A\x15\x16\n>\n\x04\x04\x08\
    \x02\x04\x12\x03C\x02\x15\x1a1\x20payload\x20has\x20to\x20be\x20a\x20val\
    id\x20json\x20object\x20as\x20string\x20\n\r\n\x05\x04\x08\x02\x04\x04\
    \x12\x04C\x02A\x17\n\x0c\n\x05\x04\x08\x02\x04\x05\x12\x03C\x02\x08\n\
    \x0c\n\x05\x04\x08\x02\x04\x01\x12\x03C\t\x10\n\x0c\n\x05\x04\x08\x02\
    \x04\x03\x12\x03C\x13\x14\n\n\n\x02\x04\t\x12\x04F\0G\x01\n\n\n\x03\x04\
    \t\x01\x12\x03F\x08\x1e\n\n\n\x02\x04\n\x12\x04I\0L\x01\n\n\n\x03\x04\n\
    \x01\x12\x03I\x08\x1f\n\x0b\n\x04\x04\n\x02\0\x12\x03J\x02\x13\n\r\n\x05\
    \x04\n\x02\0\x04\x12\x04J\x02I!\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03J\x02\
    \x07\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03J\x08\x0e\n\x0c\n\x05\x04\n\x02\
    \0\x03\x12\x03J\x11\x12\n\x0b\n\x04\x04\n\x02\x01\x12\x03K\x02\x14\n\r\n\
    \x05\x04\n\x02\x01\x04\x12\x04K\x02J\x13\n\x0c\n\x05\x04\n\x02\x01\x05\
    \x12\x03K\x02\x07\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03K\x08\x0f\n\x0c\n\
    \x05\x04\n\x02\x01\x03\x12\x03K\x12\x13\n\n\n\x02\x04\x0b\x12\x04N\0O\
    \x01\n\n\n\x03\x04\x0b\x01\x12\x03N\x08\x20\n\n\n\x02\x04\x0c\x12\x04Q\0\
    U\x01\n\n\n\x03\x04\x0c\x01\x12\x03Q\x08\x16\n\x0b\n\x04\x04\x0c\x02\0\
    \x12\x03R\x02\x13\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04R\x02Q\x18\n\x0c\n\
    \x05\x04\x0c\x02\0\x05\x12\x03R\x02\x07\n\x0c\n\x05\x04\x0c\x02\0\x01\
    \x12\x03R\x08\x0e\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03R\x11\x12\n\x0b\n\
    \x04\x04\x0c\x02\x01\x12\x03S\x02\x14\n\r\n\x05\x04\x0c\x02\x01\x04\x12\
    \x04S\x02R\x13\n\x0c\n\x05\x04\x0c\x02\x01\x05\x12\x03S\x02\x07\n\x0c\n\
    \x05\x04\x0c\x02\x01\x01\x12\x03S\x08\x0f\n\x0c\n\x05\x04\x0c\x02\x01\
    \x03\x12\x03S\x12\x13\n\x0b\n\x04\x04\x0c\x02\x02\x12\x03T\x02\x1a\n\r\n\
    \x05\x04\x0c\x02\x02\x04\x12\x04T\x02S\x14\n\x0c\n\x05\x04\x0c\x02\x02\
    \x05\x12\x03T\x02\x08\n\x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03T\t\x15\n\
    \x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03T\x18\x19\n\n\n\x02\x04\r\x12\x04W\
    \0X\x01\n\n\n\x03\x04\r\x01\x12\x03W\x08\x17\n\n\n\x02\x04\x0e\x12\x04Z\
    \0^\x01\n\n\n\x03\x04\x0e\x01\x12\x03Z\x08\x1a\n\x0b\n\x04\x04\x0e\x02\0\
    \x12\x03[\x02\x13\n\r\n\x05\x04\x0e\x02\0\x04\x12\x04[\x02Z\x1c\n\x0c\n\
    \x05\x04\x0e\x02\0\x05\x12\x03[\x02\x07\n\x0c\n\x05\x04\x0e\x02\0\x01\
    \x12\x03[\x08\x0e\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03[\x11\x12\n>\n\
    \x04\x04\x0e\x02\x01\x12\x03]\x02\x15\x1a1\x20payload\x20has\x20to\x20be\
    \x20a\x20valid\x20json\x20object\x20as\x20string\x20\n\r\n\x05\x04\x0e\
    \x02\x01\x04\x12\x04]\x02[\x13\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03]\
    \x02\x08\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03]\t\x10\n\x0c\n\x05\x04\
    \x0e\x02\x01\x03\x12\x03]\x13\x14\n\n\n\x02\x04\x0f\x12\x04`\0a\x01\n\n\
    \n\x03\x04\x0f\x01\x12\x03`\x08\x1b\n\n\n\x02\x04\x10\x12\x04c\0j\x01\n\
    \n\n\x03\x04\x10\x01\x12\x03c\x08%\n\x0b\n\x04\x04\x10\x02\0\x12\x03d\
    \x02\x18\n\r\n\x05\x04\x10\x02\0\x04\x12\x04d\x02c'\n\x0c\n\x05\x04\x10\
    \x02\0\x05\x12\x03d\x02\x07\n\x0c\n\x05\x04\x10\x02\0\x01\x12\x03d\x08\
    \x13\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03d\x16\x17\n\x0b\n\x04\x04\x10\
    \x02\x01\x12\x03e\x02\x1b\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04e\x02d\
    \x18\n\x0c\n\x05\x04\x10\x02\x01\x05\x12\x03e\x02\x08\n\x0c\n\x05\x04\
    \x10\x02\x01\x01\x12\x03e\t\x16\n\x0c\n\x05\x04\x10\x02\x01\x03\x12\x03e\
    \x19\x1a\nW\n\x04\x04\x10\x02\x02\x12\x03g\x02\x14\x1aJ\x20if\x20bpmnPro\
    cessId\x20is\x20set\x20version\x20=\x20-1\x20indicates\x20to\x20use\x20t\
    he\x20latest\x20version\x20\n\r\n\x05\x04\x10\x02\x02\x04\x12\x04g\x02e\
    \x1b\n\x0c\n\x05\x04\x10\x02\x02\x05\x12\x03g\x02\x07\n\x0c\n\x05\x04\
    \x10\x02\x02\x01\x12\x03g\x08\x0f\n\x0c\n\x05\x04\x10\x02\x02\x03\x12\
    \x03g\x12\x13\n>\n\x04\x04\x10\x02\x03\x12\x03i\x02\x15\x1a1\x20payload\
    \x20has\x20to\x20be\x20a\x20valid\x20json\x20object\x20as\x20string\x20\
    \n\r\n\x05\x04\x10\x02\x03\x04\x12\x04i\x02g\x14\n\x0c\n\x05\x04\x10\x02\
    \x03\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x10\x02\x03\x01\x12\x03i\t\x10\
    \n\x0c\n\x05\x04\x10\x02\x03\x03\x12\x03i\x13\x14\n\n\n\x02\x04\x11\x12\
    \x04l\0q\x01\n\n\n\x03\x04\x11\x01\x12\x03l\x08&\n\x0b\n\x04\x04\x11\x02\
    \0\x12\x03m\x02\x18\n\r\n\x05\x04\x11\x02\0\x04\x12\x04m\x02l(\n\x0c\n\
    \x05\x04\x11\x02\0\x05\x12\x03m\x02\x07\n\x0c\n\x05\x04\x11\x02\0\x01\
    \x12\x03m\x08\x13\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03m\x16\x17\n\x0b\n\
    \x04\x04\x11\x02\x01\x12\x03n\x02\x1b\n\r\n\x05\x04\x11\x02\x01\x04\x12\
    \x04n\x02m\x18\n\x0c\n\x05\x04\x11\x02\x01\x05\x12\x03n\x02\x08\n\x0c\n\
    \x05\x04\x11\x02\x01\x01\x12\x03n\t\x16\n\x0c\n\x05\x04\x11\x02\x01\x03\
    \x12\x03n\x19\x1a\n\x0b\n\x04\x04\x11\x02\x02\x12\x03o\x02\x14\n\r\n\x05\
    \x04\x11\x02\x02\x04\x12\x04o\x02n\x1b\n\x0c\n\x05\x04\x11\x02\x02\x05\
    \x12\x03o\x02\x07\n\x0c\n\x05\x04\x11\x02\x02\x01\x12\x03o\x08\x0f\n\x0c\
    \n\x05\x04\x11\x02\x02\x03\x12\x03o\x12\x13\n\x0b\n\x04\x04\x11\x02\x03\
    \x12\x03p\x02\x20\n\r\n\x05\x04\x11\x02\x03\x04\x12\x04p\x02o\x14\n\x0c\
    \n\x05\x04\x11\x02\x03\x05\x12\x03p\x02\x07\n\x0c\n\x05\x04\x11\x02\x03\
    \x01\x12\x03p\x08\x1b\n\x0c\n\x05\x04\x11\x02\x03\x03\x12\x03p\x1e\x1f\n\
    \n\n\x02\x04\x12\x12\x04s\0u\x01\n\n\n\x03\x04\x12\x01\x12\x03s\x08%\n\
    \x0b\n\x04\x04\x12\x02\0\x12\x03t\x02\x20\n\r\n\x05\x04\x12\x02\0\x04\
    \x12\x04t\x02s'\n\x0c\n\x05\x04\x12\x02\0\x05\x12\x03t\x02\x07\n\x0c\n\
    \x05\x04\x12\x02\0\x01\x12\x03t\x08\x1b\n\x0c\n\x05\x04\x12\x02\0\x03\
    \x12\x03t\x1e\x1f\n\n\n\x02\x04\x13\x12\x04w\0x\x01\n\n\n\x03\x04\x13\
    \x01\x12\x03w\x08&\n\n\n\x02\x04\x14\x12\x04z\0~\x01\n\n\n\x03\x04\x14\
    \x01\x12\x03z\x08,\n\x0b\n\x04\x04\x14\x02\0\x12\x03{\x02\x1f\n\r\n\x05\
    \x04\x14\x02\0\x04\x12\x04{\x02z.\n\x0c\n\x05\x04\x14\x02\0\x05\x12\x03{\
    \x02\x07\n\x0c\n\x05\x04\x14\x02\0\x01\x12\x03{\x08\x1a\n\x0c\n\x05\x04\
    \x14\x02\0\x03\x12\x03{\x1d\x1e\n>\n\x04\x04\x14\x02\x01\x12\x03}\x02\
    \x15\x1a1\x20payload\x20has\x20to\x20be\x20a\x20valid\x20json\x20object\
    \x20as\x20string\x20\n\r\n\x05\x04\x14\x02\x01\x04\x12\x04}\x02{\x1f\n\
    \x0c\n\x05\x04\x14\x02\x01\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\x14\x02\
    \x01\x01\x12\x03}\t\x10\n\x0c\n\x05\x04\x14\x02\x01\x03\x12\x03}\x13\x14\
    \n\x0c\n\x02\x04\x15\x12\x06\x80\x01\0\x81\x01\x01\n\x0b\n\x03\x04\x15\
    \x01\x12\x04\x80\x01\x08-\n\x0c\n\x02\x04\x16\x12\x06\x83\x01\0\x86\x01\
    \x01\n\x0b\n\x03\x04\x16\x01\x12\x04\x83\x01\x08\x1c\nW\n\x04\x04\x16\
    \x02\0\x12\x04\x85\x01\x02\x1b\x1aI\x20optional\x20filter\x20by\x20BPMN\
    \x20process\x20id,\x20if\x20empty\x20all\x20workflows\x20are\x20returned\
    \x20\n\x0f\n\x05\x04\x16\x02\0\x04\x12\x06\x85\x01\x02\x83\x01\x1e\n\r\n\
    \x05\x04\x16\x02\0\x05\x12\x04\x85\x01\x02\x08\n\r\n\x05\x04\x16\x02\0\
    \x01\x12\x04\x85\x01\t\x16\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\x85\x01\
    \x19\x1a\n\x0c\n\x02\x04\x17\x12\x06\x88\x01\0\x8a\x01\x01\n\x0b\n\x03\
    \x04\x17\x01\x12\x04\x88\x01\x08\x1d\n\x0c\n\x04\x04\x17\x02\0\x12\x04\
    \x89\x01\x02*\n\r\n\x05\x04\x17\x02\0\x04\x12\x04\x89\x01\x02\n\n\r\n\
    \x05\x04\x17\x02\0\x06\x12\x04\x89\x01\x0b\x1b\n\r\n\x05\x04\x17\x02\0\
    \x01\x12\x04\x89\x01\x1c%\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\x89\x01()\
    \nU\n\x02\x04\x18\x12\x06\x8d\x01\0\x92\x01\x01\x1aG\x20either\x20workfl\
    ow\x20key\x20or\x20bpmn\x20process\x20id\x20and\x20version\x20has\x20to\
    \x20be\x20specified\n\x0b\n\x03\x04\x18\x01\x12\x04\x8d\x01\x08\x1a\n\
    \x0c\n\x04\x04\x18\x02\0\x12\x04\x8e\x01\x02\x18\n\x0f\n\x05\x04\x18\x02\
    \0\x04\x12\x06\x8e\x01\x02\x8d\x01\x1c\n\r\n\x05\x04\x18\x02\0\x05\x12\
    \x04\x8e\x01\x02\x07\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\x8e\x01\x08\x13\
    \n\r\n\x05\x04\x18\x02\0\x03\x12\x04\x8e\x01\x16\x17\nX\n\x04\x04\x18\
    \x02\x01\x12\x04\x90\x01\x02\x14\x1aJ\x20if\x20bpmnProcessId\x20is\x20se\
    t\x20version\x20=\x20-1\x20indicates\x20to\x20use\x20the\x20latest\x20ve\
    rsion\x20\n\x0f\n\x05\x04\x18\x02\x01\x04\x12\x06\x90\x01\x02\x8e\x01\
    \x18\n\r\n\x05\x04\x18\x02\x01\x05\x12\x04\x90\x01\x02\x07\n\r\n\x05\x04\
    \x18\x02\x01\x01\x12\x04\x90\x01\x08\x0f\n\r\n\x05\x04\x18\x02\x01\x03\
    \x12\x04\x90\x01\x12\x13\n\x0c\n\x04\x04\x18\x02\x02\x12\x04\x91\x01\x02\
    \x1b\n\x0f\n\x05\x04\x18\x02\x02\x04\x12\x06\x91\x01\x02\x90\x01\x14\n\r\
    \n\x05\x04\x18\x02\x02\x05\x12\x04\x91\x01\x02\x08\n\r\n\x05\x04\x18\x02\
    \x02\x01\x12\x04\x91\x01\t\x16\n\r\n\x05\x04\x18\x02\x02\x03\x12\x04\x91\
    \x01\x19\x1a\n\x0c\n\x02\x04\x19\x12\x06\x94\x01\0\x9a\x01\x01\n\x0b\n\
    \x03\x04\x19\x01\x12\x04\x94\x01\x08\x1b\n\x0c\n\x04\x04\x19\x02\0\x12\
    \x04\x95\x01\x02\x18\n\x0f\n\x05\x04\x19\x02\0\x04\x12\x06\x95\x01\x02\
    \x94\x01\x1d\n\r\n\x05\x04\x19\x02\0\x05\x12\x04\x95\x01\x02\x07\n\r\n\
    \x05\x04\x19\x02\0\x01\x12\x04\x95\x01\x08\x13\n\r\n\x05\x04\x19\x02\0\
    \x03\x12\x04\x95\x01\x16\x17\n\x0c\n\x04\x04\x19\x02\x01\x12\x04\x96\x01\
    \x02\x14\n\x0f\n\x05\x04\x19\x02\x01\x04\x12\x06\x96\x01\x02\x95\x01\x18\
    \n\r\n\x05\x04\x19\x02\x01\x05\x12\x04\x96\x01\x02\x07\n\r\n\x05\x04\x19\
    \x02\x01\x01\x12\x04\x96\x01\x08\x0f\n\r\n\x05\x04\x19\x02\x01\x03\x12\
    \x04\x96\x01\x12\x13\n\x0c\n\x04\x04\x19\x02\x02\x12\x04\x97\x01\x02\x1b\
    \n\x0f\n\x05\x04\x19\x02\x02\x04\x12\x06\x97\x01\x02\x96\x01\x14\n\r\n\
    \x05\x04\x19\x02\x02\x05\x12\x04\x97\x01\x02\x08\n\r\n\x05\x04\x19\x02\
    \x02\x01\x12\x04\x97\x01\t\x16\n\r\n\x05\x04\x19\x02\x02\x03\x12\x04\x97\
    \x01\x19\x1a\n\x0c\n\x04\x04\x19\x02\x03\x12\x04\x98\x01\x02\x1a\n\x0f\n\
    \x05\x04\x19\x02\x03\x04\x12\x06\x98\x01\x02\x97\x01\x1b\n\r\n\x05\x04\
    \x19\x02\x03\x05\x12\x04\x98\x01\x02\x08\n\r\n\x05\x04\x19\x02\x03\x01\
    \x12\x04\x98\x01\t\x15\n\r\n\x05\x04\x19\x02\x03\x03\x12\x04\x98\x01\x18\
    \x19\n\x0c\n\x04\x04\x19\x02\x04\x12\x04\x99\x01\x02\x15\n\x0f\n\x05\x04\
    \x19\x02\x04\x04\x12\x06\x99\x01\x02\x98\x01\x1a\n\r\n\x05\x04\x19\x02\
    \x04\x05\x12\x04\x99\x01\x02\x08\n\r\n\x05\x04\x19\x02\x04\x01\x12\x04\
    \x99\x01\t\x10\n\r\n\x05\x04\x19\x02\x04\x03\x12\x04\x99\x01\x13\x14\n\
    \x0c\n\x02\x04\x1a\x12\x06\x9c\x01\0\xa1\x01\x01\n\x0b\n\x03\x04\x1a\x01\
    \x12\x04\x9c\x01\x08\x1b\n\x0c\n\x04\x04\x1a\x02\0\x12\x04\x9d\x01\x02\
    \x12\n\x0f\n\x05\x04\x1a\x02\0\x04\x12\x06\x9d\x01\x02\x9c\x01\x1d\n\r\n\
    \x05\x04\x1a\x02\0\x05\x12\x04\x9d\x01\x02\x08\n\r\n\x05\x04\x1a\x02\0\
    \x01\x12\x04\x9d\x01\t\r\n\r\n\x05\x04\x1a\x02\0\x03\x12\x04\x9d\x01\x10\
    \x11\n\x0c\n\x04\x04\x1a\x02\x01\x12\x04\x9e\x01\x02\x14\n\x0f\n\x05\x04\
    \x1a\x02\x01\x04\x12\x06\x9e\x01\x02\x9d\x01\x12\n\r\n\x05\x04\x1a\x02\
    \x01\x05\x12\x04\x9e\x01\x02\x08\n\r\n\x05\x04\x1a\x02\x01\x01\x12\x04\
    \x9e\x01\t\x0f\n\r\n\x05\x04\x1a\x02\x01\x03\x12\x04\x9e\x01\x12\x13\n\
    \x0c\n\x04\x04\x1a\x02\x02\x12\x04\x9f\x01\x02\x14\n\x0f\n\x05\x04\x1a\
    \x02\x02\x04\x12\x06\x9f\x01\x02\x9e\x01\x14\n\r\n\x05\x04\x1a\x02\x02\
    \x05\x12\x04\x9f\x01\x02\x07\n\r\n\x05\x04\x1a\x02\x02\x01\x12\x04\x9f\
    \x01\x08\x0f\n\r\n\x05\x04\x1a\x02\x02\x03\x12\x04\x9f\x01\x12\x13\n\x0c\
    \n\x04\x04\x1a\x02\x03\x12\x04\xa0\x01\x02\x13\n\x0f\n\x05\x04\x1a\x02\
    \x03\x04\x12\x06\xa0\x01\x02\x9f\x01\x14\n\r\n\x05\x04\x1a\x02\x03\x05\
    \x12\x04\xa0\x01\x02\x07\n\r\n\x05\x04\x1a\x02\x03\x01\x12\x04\xa0\x01\
    \x08\x0e\n\r\n\x05\x04\x1a\x02\x03\x03\x12\x04\xa0\x01\x11\x12\n\x0c\n\
    \x02\x04\x1b\x12\x06\xa3\x01\0\xaa\x01\x01\n\x0b\n\x03\x04\x1b\x01\x12\
    \x04\xa3\x01\x08\x12\n\x0c\n\x04\x04\x1b\x02\0\x12\x04\xa4\x01\x02\x20\n\
    \x0f\n\x05\x04\x1b\x02\0\x04\x12\x06\xa4\x01\x02\xa3\x01\x14\n\r\n\x05\
    \x04\x1b\x02\0\x05\x12\x04\xa4\x01\x02\x07\n\r\n\x05\x04\x1b\x02\0\x01\
    \x12\x04\xa4\x01\x08\x1b\n\r\n\x05\x04\x1b\x02\0\x03\x12\x04\xa4\x01\x1e\
    \x1f\n\x0c\n\x04\x04\x1b\x02\x01\x12\x04\xa5\x01\x02\x1b\n\x0f\n\x05\x04\
    \x1b\x02\x01\x04\x12\x06\xa5\x01\x02\xa4\x01\x20\n\r\n\x05\x04\x1b\x02\
    \x01\x05\x12\x04\xa5\x01\x02\x08\n\r\n\x05\x04\x1b\x02\x01\x01\x12\x04\
    \xa5\x01\t\x16\n\r\n\x05\x04\x1b\x02\x01\x03\x12\x04\xa5\x01\x19\x1a\n\
    \x0c\n\x04\x04\x1b\x02\x02\x12\x04\xa6\x01\x02&\n\x0f\n\x05\x04\x1b\x02\
    \x02\x04\x12\x06\xa6\x01\x02\xa5\x01\x1b\n\r\n\x05\x04\x1b\x02\x02\x05\
    \x12\x04\xa6\x01\x02\x07\n\r\n\x05\x04\x1b\x02\x02\x01\x12\x04\xa6\x01\
    \x08!\n\r\n\x05\x04\x1b\x02\x02\x03\x12\x04\xa6\x01$%\n\x0c\n\x04\x04\
    \x1b\x02\x03\x12\x04\xa7\x01\x02\x18\n\x0f\n\x05\x04\x1b\x02\x03\x04\x12\
    \x06\xa7\x01\x02\xa6\x01&\n\r\n\x05\x04\x1b\x02\x03\x05\x12\x04\xa7\x01\
    \x02\x07\n\r\n\x05\x04\x1b\x02\x03\x01\x12\x04\xa7\x01\x08\x13\n\r\n\x05\
    \x04\x1b\x02\x03\x03\x12\x04\xa7\x01\x16\x17\n\x0c\n\x04\x04\x1b\x02\x04\
    \x12\x04\xa8\x01\x02\x17\n\x0f\n\x05\x04\x1b\x02\x04\x04\x12\x06\xa8\x01\
    \x02\xa7\x01\x18\n\r\n\x05\x04\x1b\x02\x04\x05\x12\x04\xa8\x01\x02\x08\n\
    \r\n\x05\x04\x1b\x02\x04\x01\x12\x04\xa8\x01\t\x12\n\r\n\x05\x04\x1b\x02\
    \x04\x03\x12\x04\xa8\x01\x15\x16\n\x0c\n\x04\x04\x1b\x02\x05\x12\x04\xa9\
    \x01\x02\x1f\n\x0f\n\x05\x04\x1b\x02\x05\x04\x12\x06\xa9\x01\x02\xa8\x01\
    \x17\n\r\n\x05\x04\x1b\x02\x05\x05\x12\x04\xa9\x01\x02\x07\n\r\n\x05\x04\
    \x1b\x02\x05\x01\x12\x04\xa9\x01\x08\x1a\n\r\n\x05\x04\x1b\x02\x05\x03\
    \x12\x04\xa9\x01\x1d\x1e\n\x0c\n\x02\x04\x1c\x12\x06\xac\x01\0\xb8\x01\
    \x01\n\x0b\n\x03\x04\x1c\x01\x12\x04\xac\x01\x08\x14\n\x0c\n\x04\x04\x1c\
    \x02\0\x12\x04\xad\x01\x02\x10\n\x0f\n\x05\x04\x1c\x02\0\x04\x12\x06\xad\
    \x01\x02\xac\x01\x16\n\r\n\x05\x04\x1c\x02\0\x05\x12\x04\xad\x01\x02\x07\
    \n\r\n\x05\x04\x1c\x02\0\x01\x12\x04\xad\x01\x08\x0b\n\r\n\x05\x04\x1c\
    \x02\0\x03\x12\x04\xad\x01\x0e\x0f\n\x0c\n\x04\x04\x1c\x02\x01\x12\x04\
    \xae\x01\x02\x12\n\x0f\n\x05\x04\x1c\x02\x01\x04\x12\x06\xae\x01\x02\xad\
    \x01\x10\n\r\n\x05\x04\x1c\x02\x01\x05\x12\x04\xae\x01\x02\x08\n\r\n\x05\
    \x04\x1c\x02\x01\x01\x12\x04\xae\x01\t\r\n\r\n\x05\x04\x1c\x02\x01\x03\
    \x12\x04\xae\x01\x10\x11\n\x0c\n\x04\x04\x1c\x02\x02\x12\x04\xaf\x01\x02\
    \x1c\n\x0f\n\x05\x04\x1c\x02\x02\x04\x12\x06\xaf\x01\x02\xae\x01\x12\n\r\
    \n\x05\x04\x1c\x02\x02\x06\x12\x04\xaf\x01\x02\x0c\n\r\n\x05\x04\x1c\x02\
    \x02\x01\x12\x04\xaf\x01\r\x17\n\r\n\x05\x04\x1c\x02\x02\x03\x12\x04\xaf\
    \x01\x1a\x1b\n%\n\x04\x04\x1c\x02\x03\x12\x04\xb1\x01\x02\x1b\x1a\x17\
    \x20json\x20object\x20as\x20string\n\n\x0f\n\x05\x04\x1c\x02\x03\x04\x12\
    \x06\xb1\x01\x02\xaf\x01\x1c\n\r\n\x05\x04\x1c\x02\x03\x05\x12\x04\xb1\
    \x01\x02\x08\n\r\n\x05\x04\x1c\x02\x03\x01\x12\x04\xb1\x01\t\x16\n\r\n\
    \x05\x04\x1c\x02\x03\x03\x12\x04\xb1\x01\x19\x1a\n\x0c\n\x04\x04\x1c\x02\
    \x04\x12\x04\xb2\x01\x02\x14\n\x0f\n\x05\x04\x1c\x02\x04\x04\x12\x06\xb2\
    \x01\x02\xb1\x01\x1b\n\r\n\x05\x04\x1c\x02\x04\x05\x12\x04\xb2\x01\x02\
    \x08\n\r\n\x05\x04\x1c\x02\x04\x01\x12\x04\xb2\x01\t\x0f\n\r\n\x05\x04\
    \x1c\x02\x04\x03\x12\x04\xb2\x01\x12\x13\n\x0c\n\x04\x04\x1c\x02\x05\x12\
    \x04\xb3\x01\x02\x14\n\x0f\n\x05\x04\x1c\x02\x05\x04\x12\x06\xb3\x01\x02\
    \xb2\x01\x14\n\r\n\x05\x04\x1c\x02\x05\x05\x12\x04\xb3\x01\x02\x07\n\r\n\
    \x05\x04\x1c\x02\x05\x01\x12\x04\xb3\x01\x08\x0f\n\r\n\x05\x04\x1c\x02\
    \x05\x03\x12\x04\xb3\x01\x12\x13\n\"\n\x04\x04\x1c\x02\x06\x12\x04\xb5\
    \x01\x02\x15\x1a\x14\x20epoch\x20milliseconds\n\n\x0f\n\x05\x04\x1c\x02\
    \x06\x04\x12\x06\xb5\x01\x02\xb3\x01\x14\n\r\n\x05\x04\x1c\x02\x06\x05\
    \x12\x04\xb5\x01\x02\x07\n\r\n\x05\x04\x1c\x02\x06\x01\x12\x04\xb5\x01\
    \x08\x10\n\r\n\x05\x04\x1c\x02\x06\x03\x12\x04\xb5\x01\x13\x14\n%\n\x04\
    \x04\x1c\x02\x07\x12\x04\xb7\x01\x02\x15\x1a\x17\x20json\x20object\x20as\
    \x20string\x20\n\x0f\n\x05\x04\x1c\x02\x07\x04\x12\x06\xb7\x01\x02\xb5\
    \x01\x15\n\r\n\x05\x04\x1c\x02\x07\x05\x12\x04\xb7\x01\x02\x08\n\r\n\x05\
    \x04\x1c\x02\x07\x01\x12\x04\xb7\x01\t\x10\n\r\n\x05\x04\x1c\x02\x07\x03\
    \x12\x04\xb7\x01\x13\x14\n\x0c\n\x02\x04\x1d\x12\x06\xba\x01\0\xbc\x01\
    \x01\n\x0b\n\x03\x04\x1d\x01\x12\x04\xba\x01\x08\x1c\n\x0c\n\x04\x04\x1d\
    \x02\0\x12\x04\xbb\x01\x02!\n\r\n\x05\x04\x1d\x02\0\x04\x12\x04\xbb\x01\
    \x02\n\n\r\n\x05\x04\x1d\x02\0\x06\x12\x04\xbb\x01\x0b\x17\n\r\n\x05\x04\
    \x1d\x02\0\x01\x12\x04\xbb\x01\x18\x1c\n\r\n\x05\x04\x1d\x02\0\x03\x12\
    \x04\xbb\x01\x1f\x20\n\x0c\n\x02\x04\x1e\x12\x06\xbe\x01\0\xc0\x01\x01\n\
    \x0b\n\x03\x04\x1e\x01\x12\x04\xbe\x01\x08\x1e\n\x0c\n\x04\x04\x1e\x02\0\
    \x12\x04\xbf\x01\x02\x18\n\x0f\n\x05\x04\x1e\x02\0\x04\x12\x06\xbf\x01\
    \x02\xbe\x01\x20\n\r\n\x05\x04\x1e\x02\0\x05\x12\x04\xbf\x01\x02\x07\n\r\
    \n\x05\x04\x1e\x02\0\x01\x12\x04\xbf\x01\x08\x13\n\r\n\x05\x04\x1e\x02\0\
    \x03\x12\x04\xbf\x01\x16\x17\n\x0c\n\x02\x04\x1f\x12\x06\xc2\x01\0\xc3\
    \x01\x01\n\x0b\n\x03\x04\x1f\x01\x12\x04\xc2\x01\x08\x1f\n\x0c\n\x02\x06\
    \0\x12\x06\xc5\x01\0\xe0\x01\x01\n\x0b\n\x03\x06\0\x01\x12\x04\xc5\x01\
    \x08\x0f\n\x0e\n\x04\x06\0\x02\0\x12\x06\xc6\x01\x02\xc7\x01\x03\n\r\n\
    \x05\x06\0\x02\0\x01\x12\x04\xc6\x01\x06\x0e\n\r\n\x05\x06\0\x02\0\x02\
    \x12\x04\xc6\x01\x10\x1f\n\r\n\x05\x06\0\x02\0\x03\x12\x04\xc6\x01*:\n\
    \x0e\n\x04\x06\0\x02\x01\x12\x06\xc8\x01\x02\xc9\x01\x03\n\r\n\x05\x06\0\
    \x02\x01\x01\x12\x04\xc8\x01\x06\x14\n\r\n\x05\x06\0\x02\x01\x02\x12\x04\
    \xc8\x01\x16+\n\r\n\x05\x06\0\x02\x01\x03\x12\x04\xc8\x016L\n\x0e\n\x04\
    \x06\0\x02\x02\x12\x06\xca\x01\x02\xcb\x01\x03\n\r\n\x05\x06\0\x02\x02\
    \x01\x12\x04\xca\x01\x06\x14\n\r\n\x05\x06\0\x02\x02\x02\x12\x04\xca\x01\
    \x16+\n\r\n\x05\x06\0\x02\x02\x03\x12\x04\xca\x016L\n\x0e\n\x04\x06\0\
    \x02\x03\x12\x06\xcc\x01\x02\xcd\x01\x03\n\r\n\x05\x06\0\x02\x03\x01\x12\
    \x04\xcc\x01\x06\x16\n\r\n\x05\x06\0\x02\x03\x02\x12\x04\xcc\x01\x18/\n\
    \r\n\x05\x06\0\x02\x03\x03\x12\x04\xcc\x01:R\n\x0e\n\x04\x06\0\x02\x04\
    \x12\x06\xce\x01\x02\xcf\x01\x03\n\r\n\x05\x06\0\x02\x04\x01\x12\x04\xce\
    \x01\x06\r\n\r\n\x05\x06\0\x02\x04\x02\x12\x04\xce\x01\x0f\x1d\n\r\n\x05\
    \x06\0\x02\x04\x03\x12\x04\xce\x01(7\n\x0e\n\x04\x06\0\x02\x05\x12\x06\
    \xd0\x01\x02\xd1\x01\x03\n\r\n\x05\x06\0\x02\x05\x01\x12\x04\xd0\x01\x06\
    \x11\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\xd0\x01\x13%\n\r\n\x05\x06\0\
    \x02\x05\x03\x12\x04\xd0\x010C\n\x0e\n\x04\x06\0\x02\x06\x12\x06\xd2\x01\
    \x02\xd3\x01\x03\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\xd2\x01\x06\x1c\n\r\
    \n\x05\x06\0\x02\x06\x02\x12\x04\xd2\x01\x1e;\n\r\n\x05\x06\0\x02\x06\
    \x03\x12\x04\xd2\x01Fd\n\x0e\n\x04\x06\0\x02\x07\x12\x06\xd4\x01\x02\xd5\
    \x01\x03\n\r\n\x05\x06\0\x02\x07\x01\x12\x04\xd4\x01\x06\x1c\n\r\n\x05\
    \x06\0\x02\x07\x02\x12\x04\xd4\x01\x1e;\n\r\n\x05\x06\0\x02\x07\x03\x12\
    \x04\xd4\x01Fd\n\x0e\n\x04\x06\0\x02\x08\x12\x06\xd6\x01\x02\xd7\x01\x03\
    \n\r\n\x05\x06\0\x02\x08\x01\x12\x04\xd6\x01\x06#\n\r\n\x05\x06\0\x02\
    \x08\x02\x12\x04\xd6\x01%I\n\r\n\x05\x06\0\x02\x08\x03\x12\x04\xd6\x01Ty\
    \n\x0e\n\x04\x06\0\x02\t\x12\x06\xd8\x01\x02\xd9\x01\x03\n\r\n\x05\x06\0\
    \x02\t\x01\x12\x04\xd8\x01\x06\x12\n\r\n\x05\x06\0\x02\t\x02\x12\x04\xd8\
    \x01\x14'\n\r\n\x05\x06\0\x02\t\x06\x12\x04\xd8\x0128\n\r\n\x05\x06\0\
    \x02\t\x03\x12\x04\xd8\x019M\n\x0e\n\x04\x06\0\x02\n\x12\x06\xda\x01\x02\
    \xdb\x01\x03\n\r\n\x05\x06\0\x02\n\x01\x12\x04\xda\x01\x06\x13\n\r\n\x05\
    \x06\0\x02\n\x02\x12\x04\xda\x01\x15)\n\r\n\x05\x06\0\x02\n\x03\x12\x04\
    \xda\x014I\n\x0e\n\x04\x06\0\x02\x0b\x12\x06\xdc\x01\x02\xdd\x01\x03\n\r\
    \n\x05\x06\0\x02\x0b\x01\x12\x04\xdc\x01\x06\x11\n\r\n\x05\x06\0\x02\x0b\
    \x02\x12\x04\xdc\x01\x13%\n\r\n\x05\x06\0\x02\x0b\x03\x12\x04\xdc\x010C\
    \n\x0e\n\x04\x06\0\x02\x0c\x12\x06\xde\x01\x02\xdf\x01\x03\n\r\n\x05\x06\
    \0\x02\x0c\x01\x12\x04\xde\x01\x06\x15\n\r\n\x05\x06\0\x02\x0c\x02\x12\
    \x04\xde\x01\x17-\n\r\n\x05\x06\0\x02\x0c\x03\x12\x04\xde\x018Ob\x06prot\
    o3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
